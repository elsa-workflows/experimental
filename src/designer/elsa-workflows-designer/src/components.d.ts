/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { ActionDefinition, ActionInvokedArgs, Activity, ActivityDescriptor, ActivitySelectedArgs, ContainerSelectedArgs, GraphUpdatedArgs, TabChangedArgs, TabDefinition, Trigger, TriggerDescriptor, Workflow } from "./models";
import { ActivityUpdatedArgs, DeleteActivityRequestedArgs } from "./components/designer/activity-properties-editor/activity-properties-editor";
import { AddActivityArgs } from "./components/designer/canvas/canvas";
import { AddActivityArgs as AddActivityArgs1 } from "./components/designer/canvas/canvas";
import { PanelPosition, PanelStateChangedArgs } from "./components/designer/panel/models";
import { Graph } from "@antv/x6";
import { TriggerDeselectedArgs, TriggerSelectedArgs, TriggersUpdatedArgs } from "./components/designer/trigger-container/trigger-container";
import { DeleteTriggerRequestedArgs, TriggerUpdatedArgs } from "./components/designer/trigger-properties-editor/trigger-properties-editor";
import { WorkflowUpdatedArgs } from "./components/designer/workflow-editor/workflow-editor";
import { ActivityDriverRegistry } from "./services";
export namespace Components {
    interface ElsaActivityPropertiesEditor {
        "activity"?: Activity;
        "activityDescriptors": Array<ActivityDescriptor>;
        "hide": () => Promise<void>;
        "show": () => Promise<void>;
    }
    interface ElsaCanvas {
        "addActivity": (args: AddActivityArgs) => Promise<void>;
        "exportGraph": () => Promise<Activity>;
        "updateLayout": () => Promise<void>;
    }
    interface ElsaFlowchart {
        "activityDescriptors": Array<ActivityDescriptor>;
        "addActivity": (args: AddActivityArgs) => Promise<void>;
        "exportGraph": () => Promise<Activity>;
        "updateLayout": () => Promise<void>;
    }
    interface ElsaFormPanel {
        "actions": Array<ActionDefinition>;
        "headerText": string;
        "selectedTabIndex"?: number;
        "tabs": Array<TabDefinition>;
    }
    interface ElsaPanel {
        "position": PanelPosition;
    }
    interface ElsaServerShell {
        "serverUrl": string;
    }
    interface ElsaSlideOverPanel {
        "actions": Array<ActionDefinition>;
        "expand": boolean;
        "headerText": string;
        "hide": () => Promise<void>;
        "selectedTab"?: TabDefinition;
        "show": () => Promise<void>;
        "tabs": Array<TabDefinition>;
    }
    interface ElsaToolbox {
        "graph": Graph;
    }
    interface ElsaToolboxActivities {
        "activityDescriptors": Array<ActivityDescriptor>;
        "graph": Graph;
        "triggerDescriptors": Array<TriggerDescriptor>;
    }
    interface ElsaToolboxTriggers {
        "activityDescriptors": Array<ActivityDescriptor>;
        "graph": Graph;
        "triggerDescriptors": Array<TriggerDescriptor>;
    }
    interface ElsaTriggerContainer {
        "deselectAll": () => Promise<void>;
        "triggerDescriptors": Array<TriggerDescriptor>;
        "workflow": Workflow;
    }
    interface ElsaTriggerPropertiesEditor {
        "hide": () => Promise<void>;
        "show": () => Promise<void>;
        "trigger"?: Trigger;
        "triggerDescriptors": Array<TriggerDescriptor>;
    }
    interface ElsaWorkflowEditor {
        "activityDescriptors": Array<ActivityDescriptor>;
        "registerActivityDrivers": (register: (registry: ActivityDriverRegistry) => void) => Promise<void>;
        "triggerDescriptors": Array<TriggerDescriptor>;
        "workflow": Workflow;
    }
    interface ElsaWorkflowPublishButton {
        "publishing": boolean;
    }
    interface ElsaWorkflowToolbar {
    }
}
declare global {
    interface HTMLElsaActivityPropertiesEditorElement extends Components.ElsaActivityPropertiesEditor, HTMLStencilElement {
    }
    var HTMLElsaActivityPropertiesEditorElement: {
        prototype: HTMLElsaActivityPropertiesEditorElement;
        new (): HTMLElsaActivityPropertiesEditorElement;
    };
    interface HTMLElsaCanvasElement extends Components.ElsaCanvas, HTMLStencilElement {
    }
    var HTMLElsaCanvasElement: {
        prototype: HTMLElsaCanvasElement;
        new (): HTMLElsaCanvasElement;
    };
    interface HTMLElsaFlowchartElement extends Components.ElsaFlowchart, HTMLStencilElement {
    }
    var HTMLElsaFlowchartElement: {
        prototype: HTMLElsaFlowchartElement;
        new (): HTMLElsaFlowchartElement;
    };
    interface HTMLElsaFormPanelElement extends Components.ElsaFormPanel, HTMLStencilElement {
    }
    var HTMLElsaFormPanelElement: {
        prototype: HTMLElsaFormPanelElement;
        new (): HTMLElsaFormPanelElement;
    };
    interface HTMLElsaPanelElement extends Components.ElsaPanel, HTMLStencilElement {
    }
    var HTMLElsaPanelElement: {
        prototype: HTMLElsaPanelElement;
        new (): HTMLElsaPanelElement;
    };
    interface HTMLElsaServerShellElement extends Components.ElsaServerShell, HTMLStencilElement {
    }
    var HTMLElsaServerShellElement: {
        prototype: HTMLElsaServerShellElement;
        new (): HTMLElsaServerShellElement;
    };
    interface HTMLElsaSlideOverPanelElement extends Components.ElsaSlideOverPanel, HTMLStencilElement {
    }
    var HTMLElsaSlideOverPanelElement: {
        prototype: HTMLElsaSlideOverPanelElement;
        new (): HTMLElsaSlideOverPanelElement;
    };
    interface HTMLElsaToolboxElement extends Components.ElsaToolbox, HTMLStencilElement {
    }
    var HTMLElsaToolboxElement: {
        prototype: HTMLElsaToolboxElement;
        new (): HTMLElsaToolboxElement;
    };
    interface HTMLElsaToolboxActivitiesElement extends Components.ElsaToolboxActivities, HTMLStencilElement {
    }
    var HTMLElsaToolboxActivitiesElement: {
        prototype: HTMLElsaToolboxActivitiesElement;
        new (): HTMLElsaToolboxActivitiesElement;
    };
    interface HTMLElsaToolboxTriggersElement extends Components.ElsaToolboxTriggers, HTMLStencilElement {
    }
    var HTMLElsaToolboxTriggersElement: {
        prototype: HTMLElsaToolboxTriggersElement;
        new (): HTMLElsaToolboxTriggersElement;
    };
    interface HTMLElsaTriggerContainerElement extends Components.ElsaTriggerContainer, HTMLStencilElement {
    }
    var HTMLElsaTriggerContainerElement: {
        prototype: HTMLElsaTriggerContainerElement;
        new (): HTMLElsaTriggerContainerElement;
    };
    interface HTMLElsaTriggerPropertiesEditorElement extends Components.ElsaTriggerPropertiesEditor, HTMLStencilElement {
    }
    var HTMLElsaTriggerPropertiesEditorElement: {
        prototype: HTMLElsaTriggerPropertiesEditorElement;
        new (): HTMLElsaTriggerPropertiesEditorElement;
    };
    interface HTMLElsaWorkflowEditorElement extends Components.ElsaWorkflowEditor, HTMLStencilElement {
    }
    var HTMLElsaWorkflowEditorElement: {
        prototype: HTMLElsaWorkflowEditorElement;
        new (): HTMLElsaWorkflowEditorElement;
    };
    interface HTMLElsaWorkflowPublishButtonElement extends Components.ElsaWorkflowPublishButton, HTMLStencilElement {
    }
    var HTMLElsaWorkflowPublishButtonElement: {
        prototype: HTMLElsaWorkflowPublishButtonElement;
        new (): HTMLElsaWorkflowPublishButtonElement;
    };
    interface HTMLElsaWorkflowToolbarElement extends Components.ElsaWorkflowToolbar, HTMLStencilElement {
    }
    var HTMLElsaWorkflowToolbarElement: {
        prototype: HTMLElsaWorkflowToolbarElement;
        new (): HTMLElsaWorkflowToolbarElement;
    };
    interface HTMLElementTagNameMap {
        "elsa-activity-properties-editor": HTMLElsaActivityPropertiesEditorElement;
        "elsa-canvas": HTMLElsaCanvasElement;
        "elsa-flowchart": HTMLElsaFlowchartElement;
        "elsa-form-panel": HTMLElsaFormPanelElement;
        "elsa-panel": HTMLElsaPanelElement;
        "elsa-server-shell": HTMLElsaServerShellElement;
        "elsa-slide-over-panel": HTMLElsaSlideOverPanelElement;
        "elsa-toolbox": HTMLElsaToolboxElement;
        "elsa-toolbox-activities": HTMLElsaToolboxActivitiesElement;
        "elsa-toolbox-triggers": HTMLElsaToolboxTriggersElement;
        "elsa-trigger-container": HTMLElsaTriggerContainerElement;
        "elsa-trigger-properties-editor": HTMLElsaTriggerPropertiesEditorElement;
        "elsa-workflow-editor": HTMLElsaWorkflowEditorElement;
        "elsa-workflow-publish-button": HTMLElsaWorkflowPublishButtonElement;
        "elsa-workflow-toolbar": HTMLElsaWorkflowToolbarElement;
    }
}
declare namespace LocalJSX {
    interface ElsaActivityPropertiesEditor {
        "activity"?: Activity;
        "activityDescriptors"?: Array<ActivityDescriptor>;
        "onActivityUpdated"?: (event: CustomEvent<ActivityUpdatedArgs>) => void;
        "onDeleteActivityRequested"?: (event: CustomEvent<DeleteActivityRequestedArgs>) => void;
    }
    interface ElsaCanvas {
    }
    interface ElsaFlowchart {
        "activityDescriptors"?: Array<ActivityDescriptor>;
        "onActivitySelected"?: (event: CustomEvent<ActivitySelectedArgs>) => void;
        "onContainerSelected"?: (event: CustomEvent<ContainerSelectedArgs>) => void;
        "onGraphUpdated"?: (event: CustomEvent<GraphUpdatedArgs>) => void;
    }
    interface ElsaFormPanel {
        "actions"?: Array<ActionDefinition>;
        "headerText"?: string;
        "onActionInvoked"?: (event: CustomEvent<ActionInvokedArgs>) => void;
        "onSelectedTabIndexChanged"?: (event: CustomEvent<TabChangedArgs>) => void;
        "onSubmitted"?: (event: CustomEvent<FormData>) => void;
        "selectedTabIndex"?: number;
        "tabs"?: Array<TabDefinition>;
    }
    interface ElsaPanel {
        "onExpandedStateChanged"?: (event: CustomEvent<PanelStateChangedArgs>) => void;
        "position"?: PanelPosition;
    }
    interface ElsaServerShell {
        "serverUrl"?: string;
    }
    interface ElsaSlideOverPanel {
        "actions"?: Array<ActionDefinition>;
        "expand"?: boolean;
        "headerText"?: string;
        "onCollapsed"?: (event: CustomEvent<any>) => void;
        "onSubmitted"?: (event: CustomEvent<FormData>) => void;
        "selectedTab"?: TabDefinition;
        "tabs"?: Array<TabDefinition>;
    }
    interface ElsaToolbox {
        "graph"?: Graph;
    }
    interface ElsaToolboxActivities {
        "activityDescriptors"?: Array<ActivityDescriptor>;
        "graph"?: Graph;
        "triggerDescriptors"?: Array<TriggerDescriptor>;
    }
    interface ElsaToolboxTriggers {
        "activityDescriptors"?: Array<ActivityDescriptor>;
        "graph"?: Graph;
        "triggerDescriptors"?: Array<TriggerDescriptor>;
    }
    interface ElsaTriggerContainer {
        "onTriggerDeselected"?: (event: CustomEvent<TriggerDeselectedArgs>) => void;
        "onTriggerSelected"?: (event: CustomEvent<TriggerSelectedArgs>) => void;
        "onTriggersUpdated"?: (event: CustomEvent<TriggersUpdatedArgs>) => void;
        "triggerDescriptors"?: Array<TriggerDescriptor>;
        "workflow"?: Workflow;
    }
    interface ElsaTriggerPropertiesEditor {
        "onDeleteTriggerRequested"?: (event: CustomEvent<DeleteTriggerRequestedArgs>) => void;
        "onTriggerUpdated"?: (event: CustomEvent<TriggerUpdatedArgs>) => void;
        "trigger"?: Trigger;
        "triggerDescriptors"?: Array<TriggerDescriptor>;
    }
    interface ElsaWorkflowEditor {
        "activityDescriptors"?: Array<ActivityDescriptor>;
        "onWorkflowUpdated"?: (event: CustomEvent<WorkflowUpdatedArgs>) => void;
        "triggerDescriptors"?: Array<TriggerDescriptor>;
        "workflow"?: Workflow;
    }
    interface ElsaWorkflowPublishButton {
        "onExportClicked"?: (event: CustomEvent<any>) => void;
        "onImportClicked"?: (event: CustomEvent<File>) => void;
        "onPublishClicked"?: (event: CustomEvent<any>) => void;
        "onUnPublishClicked"?: (event: CustomEvent<any>) => void;
        "publishing"?: boolean;
    }
    interface ElsaWorkflowToolbar {
    }
    interface IntrinsicElements {
        "elsa-activity-properties-editor": ElsaActivityPropertiesEditor;
        "elsa-canvas": ElsaCanvas;
        "elsa-flowchart": ElsaFlowchart;
        "elsa-form-panel": ElsaFormPanel;
        "elsa-panel": ElsaPanel;
        "elsa-server-shell": ElsaServerShell;
        "elsa-slide-over-panel": ElsaSlideOverPanel;
        "elsa-toolbox": ElsaToolbox;
        "elsa-toolbox-activities": ElsaToolboxActivities;
        "elsa-toolbox-triggers": ElsaToolboxTriggers;
        "elsa-trigger-container": ElsaTriggerContainer;
        "elsa-trigger-properties-editor": ElsaTriggerPropertiesEditor;
        "elsa-workflow-editor": ElsaWorkflowEditor;
        "elsa-workflow-publish-button": ElsaWorkflowPublishButton;
        "elsa-workflow-toolbar": ElsaWorkflowToolbar;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "elsa-activity-properties-editor": LocalJSX.ElsaActivityPropertiesEditor & JSXBase.HTMLAttributes<HTMLElsaActivityPropertiesEditorElement>;
            "elsa-canvas": LocalJSX.ElsaCanvas & JSXBase.HTMLAttributes<HTMLElsaCanvasElement>;
            "elsa-flowchart": LocalJSX.ElsaFlowchart & JSXBase.HTMLAttributes<HTMLElsaFlowchartElement>;
            "elsa-form-panel": LocalJSX.ElsaFormPanel & JSXBase.HTMLAttributes<HTMLElsaFormPanelElement>;
            "elsa-panel": LocalJSX.ElsaPanel & JSXBase.HTMLAttributes<HTMLElsaPanelElement>;
            "elsa-server-shell": LocalJSX.ElsaServerShell & JSXBase.HTMLAttributes<HTMLElsaServerShellElement>;
            "elsa-slide-over-panel": LocalJSX.ElsaSlideOverPanel & JSXBase.HTMLAttributes<HTMLElsaSlideOverPanelElement>;
            "elsa-toolbox": LocalJSX.ElsaToolbox & JSXBase.HTMLAttributes<HTMLElsaToolboxElement>;
            "elsa-toolbox-activities": LocalJSX.ElsaToolboxActivities & JSXBase.HTMLAttributes<HTMLElsaToolboxActivitiesElement>;
            "elsa-toolbox-triggers": LocalJSX.ElsaToolboxTriggers & JSXBase.HTMLAttributes<HTMLElsaToolboxTriggersElement>;
            "elsa-trigger-container": LocalJSX.ElsaTriggerContainer & JSXBase.HTMLAttributes<HTMLElsaTriggerContainerElement>;
            "elsa-trigger-properties-editor": LocalJSX.ElsaTriggerPropertiesEditor & JSXBase.HTMLAttributes<HTMLElsaTriggerPropertiesEditorElement>;
            "elsa-workflow-editor": LocalJSX.ElsaWorkflowEditor & JSXBase.HTMLAttributes<HTMLElsaWorkflowEditorElement>;
            "elsa-workflow-publish-button": LocalJSX.ElsaWorkflowPublishButton & JSXBase.HTMLAttributes<HTMLElsaWorkflowPublishButtonElement>;
            "elsa-workflow-toolbar": LocalJSX.ElsaWorkflowToolbar & JSXBase.HTMLAttributes<HTMLElsaWorkflowToolbarElement>;
        }
    }
}
