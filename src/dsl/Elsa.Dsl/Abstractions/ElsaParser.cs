//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Projects/Elsa/experimental/src/dsl/Elsa.Dsl/Dsl\ElsaParser.g4 by ANTLR 4.9.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.1")]
[System.CLSCompliant(false)]
public partial class ElsaParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		EQ=1, GREATER=2, INCREMENT=3, DECREMENT=4, TRIGGER=5, VARIABLE=6, LET=7, 
		IF=8, THEN=9, ELSE=10, FOR=11, RETURN=12, VOID=13, FLOAT=14, INT=15, STRING=16, 
		OBJECT=17, SEQUENCE=18, ID=19, SYMBOL=20, INTEGER_VAL=21, COLON=22, SEMICOLON=23, 
		COMMA=24, PLUS=25, MINUS=26, STAR=27, EQUALS=28, NOT_EQUALS=29, GREATER_EQUALS=30, 
		LESS=31, LESS_EQUALS=32, PARENTHESES_OPEN=33, PARENTHESES_CLOSE=34, BRACKET_OPEN=35, 
		BRACKET_CLOSE=36, CURLYBRACE_OPEN=37, CURLYBRACE_CLOSE=38, EXCLAMATION=39, 
		LANGSPEC_BEGIN=40, STRING_VAL=41, LINE_COMMENT=42, CODE_VAL=43, WS=44;
	public const int
		RULE_file = 0, RULE_trigger = 1, RULE_root = 2, RULE_activity = 3, RULE_sequence = 4, 
		RULE_varDecl = 5, RULE_localVarDecl = 6, RULE_type = 7, RULE_funcCall = 8, 
		RULE_args = 9, RULE_arg = 10, RULE_block_statements = 11, RULE_block_pairs = 12, 
		RULE_pairList = 13, RULE_pair = 14, RULE_stat = 15, RULE_expr = 16, RULE_exprList = 17;
	public static readonly string[] ruleNames = {
		"file", "trigger", "root", "activity", "sequence", "varDecl", "localVarDecl", 
		"type", "funcCall", "args", "arg", "block_statements", "block_pairs", 
		"pairList", "pair", "stat", "expr", "exprList"
	};

	private static readonly string[] _LiteralNames = {
		null, "'='", "'>'", "'++'", "'--'", "'trigger'", "'variable'", "'let'", 
		"'if'", "'then'", "'else'", "'for'", "'return'", "'void'", "'float'", 
		"'int'", "'string'", "'object'", "'Sequence'", null, null, null, "':'", 
		"';'", "','", "'+'", "'-'", "'*'", "'=='", "'!='", "'>='", "'<'", "'<='", 
		"'('", "')'", "'['", "']'", "'{'", "'}'", "'!'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "EQ", "GREATER", "INCREMENT", "DECREMENT", "TRIGGER", "VARIABLE", 
		"LET", "IF", "THEN", "ELSE", "FOR", "RETURN", "VOID", "FLOAT", "INT", 
		"STRING", "OBJECT", "SEQUENCE", "ID", "SYMBOL", "INTEGER_VAL", "COLON", 
		"SEMICOLON", "COMMA", "PLUS", "MINUS", "STAR", "EQUALS", "NOT_EQUALS", 
		"GREATER_EQUALS", "LESS", "LESS_EQUALS", "PARENTHESES_OPEN", "PARENTHESES_CLOSE", 
		"BRACKET_OPEN", "BRACKET_CLOSE", "CURLYBRACE_OPEN", "CURLYBRACE_CLOSE", 
		"EXCLAMATION", "LANGSPEC_BEGIN", "STRING_VAL", "LINE_COMMENT", "CODE_VAL", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ElsaParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static ElsaParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ElsaParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ElsaParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class FileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LINE_COMMENT() { return GetTokens(ElsaParser.LINE_COMMENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINE_COMMENT(int i) {
			return GetToken(ElsaParser.LINE_COMMENT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TriggerContext[] trigger() {
			return GetRuleContexts<TriggerContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TriggerContext trigger(int i) {
			return GetRuleContext<TriggerContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RootContext root() {
			return GetRuleContext<RootContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatContext[] stat() {
			return GetRuleContexts<StatContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatContext stat(int i) {
			return GetRuleContext<StatContext>(i);
		}
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 0, RULE_file);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 39;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 36;
					Match(LINE_COMMENT);
					}
					} 
				}
				State = 41;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			}
			State = 45;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TRIGGER) {
				{
				{
				State = 42;
				trigger();
				}
				}
				State = 47;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 49;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				{
				State = 48;
				root();
				}
				break;
			}
			State = 55;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << VARIABLE) | (1L << LET) | (1L << IF) | (1L << FOR) | (1L << RETURN) | (1L << ID) | (1L << INTEGER_VAL) | (1L << MINUS) | (1L << PARENTHESES_OPEN) | (1L << BRACKET_OPEN) | (1L << CURLYBRACE_OPEN) | (1L << EXCLAMATION) | (1L << STRING_VAL) | (1L << LINE_COMMENT))) != 0)) {
				{
				State = 53;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case VARIABLE:
				case LET:
				case IF:
				case FOR:
				case RETURN:
				case ID:
				case INTEGER_VAL:
				case MINUS:
				case PARENTHESES_OPEN:
				case BRACKET_OPEN:
				case CURLYBRACE_OPEN:
				case EXCLAMATION:
				case STRING_VAL:
					{
					State = 51;
					stat();
					}
					break;
				case LINE_COMMENT:
					{
					State = 52;
					Match(LINE_COMMENT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 57;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TriggerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGER() { return GetToken(ElsaParser.TRIGGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(ElsaParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Block_pairsContext block_pairs() {
			return GetRuleContext<Block_pairsContext>(0);
		}
		public TriggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trigger; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterTrigger(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitTrigger(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrigger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TriggerContext trigger() {
		TriggerContext _localctx = new TriggerContext(Context, State);
		EnterRule(_localctx, 2, RULE_trigger);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 58;
			Match(TRIGGER);
			State = 59;
			Match(ID);
			State = 60;
			block_pairs();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RootContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ActivityContext activity() {
			return GetRuleContext<ActivityContext>(0);
		}
		public RootContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_root; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterRoot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitRoot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RootContext root() {
		RootContext _localctx = new RootContext(Context, State);
		EnterRule(_localctx, 4, RULE_root);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 62;
			activity();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActivityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SequenceContext sequence() {
			return GetRuleContext<SequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(ElsaParser.ID, 0); }
		public ActivityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_activity; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterActivity(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitActivity(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActivity(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActivityContext activity() {
		ActivityContext _localctx = new ActivityContext(Context, State);
		EnterRule(_localctx, 6, RULE_activity);
		try {
			State = 66;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SEQUENCE:
			case CURLYBRACE_OPEN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 64;
				sequence();
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 65;
				Match(ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SequenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEQUENCE() { return GetToken(ElsaParser.SEQUENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Block_statementsContext block_statements() {
			return GetRuleContext<Block_statementsContext>(0);
		}
		public SequenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sequence; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterSequence(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitSequence(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSequence(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SequenceContext sequence() {
		SequenceContext _localctx = new SequenceContext(Context, State);
		EnterRule(_localctx, 8, RULE_sequence);
		try {
			State = 70;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SEQUENCE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 68;
				Match(SEQUENCE);
				}
				break;
			case CURLYBRACE_OPEN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 69;
				block_statements();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(ElsaParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(ElsaParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(ElsaParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(ElsaParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(ElsaParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public VarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterVarDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitVarDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarDeclContext varDecl() {
		VarDeclContext _localctx = new VarDeclContext(Context, State);
		EnterRule(_localctx, 10, RULE_varDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 72;
			Match(VARIABLE);
			State = 73;
			Match(ID);
			State = 76;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 74;
				Match(COLON);
				State = 75;
				type();
				}
			}

			State = 80;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQ) {
				{
				State = 78;
				Match(EQ);
				State = 79;
				expr(0);
				}
			}

			State = 82;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LET() { return GetToken(ElsaParser.LET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(ElsaParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(ElsaParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(ElsaParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(ElsaParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public LocalVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterLocalVarDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitLocalVarDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocalVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocalVarDeclContext localVarDecl() {
		LocalVarDeclContext _localctx = new LocalVarDeclContext(Context, State);
		EnterRule(_localctx, 12, RULE_localVarDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84;
			Match(LET);
			State = 85;
			Match(ID);
			State = 88;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 86;
				Match(COLON);
				State = 87;
				type();
				}
			}

			State = 92;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQ) {
				{
				State = 90;
				Match(EQ);
				State = 91;
				expr(0);
				}
			}

			State = 94;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(ElsaParser.VOID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(ElsaParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(ElsaParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBJECT() { return GetToken(ElsaParser.OBJECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(ElsaParser.STRING, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 14, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 96;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << VOID) | (1L << FLOAT) | (1L << INT) | (1L << STRING) | (1L << OBJECT))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(ElsaParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTHESES_OPEN() { return GetToken(ElsaParser.PARENTHESES_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTHESES_CLOSE() { return GetToken(ElsaParser.PARENTHESES_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(ElsaParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgsContext args() {
			return GetRuleContext<ArgsContext>(0);
		}
		public FuncCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterFuncCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitFuncCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncCallContext funcCall() {
		FuncCallContext _localctx = new FuncCallContext(Context, State);
		EnterRule(_localctx, 16, RULE_funcCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 98;
			Match(ID);
			State = 99;
			Match(PARENTHESES_OPEN);
			State = 101;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ID) | (1L << INTEGER_VAL) | (1L << MINUS) | (1L << PARENTHESES_OPEN) | (1L << BRACKET_OPEN) | (1L << EXCLAMATION) | (1L << STRING_VAL) | (1L << CODE_VAL))) != 0)) {
				{
				State = 100;
				args();
				}
			}

			State = 103;
			Match(PARENTHESES_CLOSE);
			State = 104;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgContext[] arg() {
			return GetRuleContexts<ArgContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgContext arg(int i) {
			return GetRuleContext<ArgContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElsaParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElsaParser.COMMA, i);
		}
		public ArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_args; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterArgs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitArgs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgsContext args() {
		ArgsContext _localctx = new ArgsContext(Context, State);
		EnterRule(_localctx, 18, RULE_args);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 106;
			arg();
			State = 111;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 107;
				Match(COMMA);
				State = 108;
				arg();
				}
				}
				State = 113;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CODE_VAL() { return GetToken(ElsaParser.CODE_VAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterArg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitArg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgContext arg() {
		ArgContext _localctx = new ArgContext(Context, State);
		EnterRule(_localctx, 20, RULE_arg);
		try {
			State = 117;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CODE_VAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 114;
				Match(CODE_VAL);
				State = 115;
				expr(0);
				}
				break;
			case ID:
			case INTEGER_VAL:
			case MINUS:
			case PARENTHESES_OPEN:
			case BRACKET_OPEN:
			case EXCLAMATION:
			case STRING_VAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 116;
				expr(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Block_statementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURLYBRACE_OPEN() { return GetToken(ElsaParser.CURLYBRACE_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURLYBRACE_CLOSE() { return GetToken(ElsaParser.CURLYBRACE_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatContext[] stat() {
			return GetRuleContexts<StatContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatContext stat(int i) {
			return GetRuleContext<StatContext>(i);
		}
		public Block_statementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block_statements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterBlock_statements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitBlock_statements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock_statements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Block_statementsContext block_statements() {
		Block_statementsContext _localctx = new Block_statementsContext(Context, State);
		EnterRule(_localctx, 22, RULE_block_statements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 119;
			Match(CURLYBRACE_OPEN);
			State = 123;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << VARIABLE) | (1L << LET) | (1L << IF) | (1L << FOR) | (1L << RETURN) | (1L << ID) | (1L << INTEGER_VAL) | (1L << MINUS) | (1L << PARENTHESES_OPEN) | (1L << BRACKET_OPEN) | (1L << CURLYBRACE_OPEN) | (1L << EXCLAMATION) | (1L << STRING_VAL))) != 0)) {
				{
				{
				State = 120;
				stat();
				}
				}
				State = 125;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 126;
			Match(CURLYBRACE_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Block_pairsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURLYBRACE_OPEN() { return GetToken(ElsaParser.CURLYBRACE_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PairListContext pairList() {
			return GetRuleContext<PairListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURLYBRACE_CLOSE() { return GetToken(ElsaParser.CURLYBRACE_CLOSE, 0); }
		public Block_pairsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block_pairs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterBlock_pairs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitBlock_pairs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock_pairs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Block_pairsContext block_pairs() {
		Block_pairsContext _localctx = new Block_pairsContext(Context, State);
		EnterRule(_localctx, 24, RULE_block_pairs);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 128;
			Match(CURLYBRACE_OPEN);
			State = 129;
			pairList();
			State = 130;
			Match(CURLYBRACE_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PairListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PairContext[] pair() {
			return GetRuleContexts<PairContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PairContext pair(int i) {
			return GetRuleContext<PairContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElsaParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElsaParser.COMMA, i);
		}
		public PairListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pairList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterPairList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitPairList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPairList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PairListContext pairList() {
		PairListContext _localctx = new PairListContext(Context, State);
		EnterRule(_localctx, 26, RULE_pairList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 132;
			pair();
			State = 137;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 133;
				Match(COMMA);
				State = 134;
				pair();
				}
				}
				State = 139;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PairContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(ElsaParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(ElsaParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public PairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pair; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterPair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitPair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PairContext pair() {
		PairContext _localctx = new PairContext(Context, State);
		EnterRule(_localctx, 28, RULE_pair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 140;
			Match(ID);
			State = 141;
			Match(COLON);
			State = 142;
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(ElsaParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(ElsaParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatContext[] stat() {
			return GetRuleContexts<StatContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatContext stat(int i) {
			return GetRuleContext<StatContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(ElsaParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(ElsaParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTHESES_OPEN() { return GetToken(ElsaParser.PARENTHESES_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(ElsaParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(ElsaParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(ElsaParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(ElsaParser.SEMICOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTHESES_CLOSE() { return GetToken(ElsaParser.PARENTHESES_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(ElsaParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Block_statementsContext block_statements() {
			return GetRuleContext<Block_statementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext varDecl() {
			return GetRuleContext<VarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LocalVarDeclContext localVarDecl() {
			return GetRuleContext<LocalVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncCallContext funcCall() {
			return GetRuleContext<FuncCallContext>(0);
		}
		public StatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatContext stat() {
		StatContext _localctx = new StatContext(Context, State);
		EnterRule(_localctx, 30, RULE_stat);
		int _la;
		try {
			State = 181;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 144;
				Match(IF);
				State = 145;
				expr(0);
				State = 146;
				Match(THEN);
				State = 147;
				stat();
				State = 150;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
				case 1:
					{
					State = 148;
					Match(ELSE);
					State = 149;
					stat();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 152;
				Match(FOR);
				State = 153;
				Match(PARENTHESES_OPEN);
				State = 154;
				Match(ID);
				State = 155;
				Match(EQ);
				State = 156;
				expr(0);
				State = 157;
				Match(SEMICOLON);
				State = 158;
				expr(0);
				State = 159;
				Match(SEMICOLON);
				State = 160;
				expr(0);
				State = 161;
				Match(PARENTHESES_CLOSE);
				State = 162;
				stat();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 164;
				Match(RETURN);
				State = 166;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ID) | (1L << INTEGER_VAL) | (1L << MINUS) | (1L << PARENTHESES_OPEN) | (1L << BRACKET_OPEN) | (1L << EXCLAMATION) | (1L << STRING_VAL))) != 0)) {
					{
					State = 165;
					expr(0);
					}
				}

				State = 168;
				Match(SEMICOLON);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 169;
				block_statements();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 170;
				varDecl();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 171;
				localVarDecl();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 172;
				funcCall();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 173;
				expr(0);
				State = 174;
				Match(EQ);
				State = 175;
				expr(0);
				State = 176;
				Match(SEMICOLON);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 178;
				expr(0);
				State = 179;
				Match(SEMICOLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(ElsaParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprListContext exprList() {
			return GetRuleContext<ExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(ElsaParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLAMATION() { return GetToken(ElsaParser.EXCLAMATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_VAL() { return GetToken(ElsaParser.INTEGER_VAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_VAL() { return GetToken(ElsaParser.STRING_VAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTHESES_OPEN() { return GetToken(ElsaParser.PARENTHESES_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTHESES_CLOSE() { return GetToken(ElsaParser.PARENTHESES_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BRACKET_OPEN() { return GetToken(ElsaParser.BRACKET_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BRACKET_CLOSE() { return GetToken(ElsaParser.BRACKET_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(ElsaParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(ElsaParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(ElsaParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(ElsaParser.GREATER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(ElsaParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCREMENT() { return GetToken(ElsaParser.INCREMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECREMENT() { return GetToken(ElsaParser.DECREMENT, 0); }
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 32;
		EnterRecursionRule(_localctx, 32, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 201;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				{
				State = 184;
				Match(ID);
				State = 185;
				exprList();
				}
				break;
			case 2:
				{
				State = 186;
				Match(MINUS);
				State = 187;
				expr(10);
				}
				break;
			case 3:
				{
				State = 188;
				Match(EXCLAMATION);
				State = 189;
				expr(9);
				}
				break;
			case 4:
				{
				State = 190;
				Match(INTEGER_VAL);
				}
				break;
			case 5:
				{
				State = 191;
				Match(STRING_VAL);
				}
				break;
			case 6:
				{
				State = 192;
				Match(PARENTHESES_OPEN);
				State = 193;
				expr(0);
				State = 194;
				Match(PARENTHESES_CLOSE);
				}
				break;
			case 7:
				{
				State = 196;
				Match(BRACKET_OPEN);
				State = 197;
				expr(0);
				State = 198;
				Match(BRACKET_CLOSE);
				}
				break;
			case 8:
				{
				State = 200;
				Match(ID);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 218;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 216;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
					case 1:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 203;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 204;
						Match(STAR);
						State = 205;
						expr(9);
						}
						break;
					case 2:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 206;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 207;
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 208;
						expr(8);
						}
						break;
					case 3:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 209;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 210;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GREATER) | (1L << EQUALS) | (1L << LESS))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 211;
						expr(7);
						}
						break;
					case 4:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 212;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 213;
						Match(INCREMENT);
						}
						break;
					case 5:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 214;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 215;
						Match(DECREMENT);
						}
						break;
					}
					} 
				}
				State = 220;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExprListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElsaParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElsaParser.COMMA, i);
		}
		public ExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterExprList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitExprList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprListContext exprList() {
		ExprListContext _localctx = new ExprListContext(Context, State);
		EnterRule(_localctx, 34, RULE_exprList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 221;
			expr(0);
			State = 226;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 222;
					Match(COMMA);
					State = 223;
					expr(0);
					}
					} 
				}
				State = 228;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 16: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 8);
		case 1: return Precpred(Context, 7);
		case 2: return Precpred(Context, 6);
		case 3: return Precpred(Context, 12);
		case 4: return Precpred(Context, 11);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '.', '\xE8', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x3', '\x2', '\a', '\x2', '(', '\n', '\x2', '\f', '\x2', '\xE', 
		'\x2', '+', '\v', '\x2', '\x3', '\x2', '\a', '\x2', '.', '\n', '\x2', 
		'\f', '\x2', '\xE', '\x2', '\x31', '\v', '\x2', '\x3', '\x2', '\x5', '\x2', 
		'\x34', '\n', '\x2', '\x3', '\x2', '\x3', '\x2', '\a', '\x2', '\x38', 
		'\n', '\x2', '\f', '\x2', '\xE', '\x2', ';', '\v', '\x2', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\x45', '\n', '\x5', '\x3', 
		'\x6', '\x3', '\x6', '\x5', '\x6', 'I', '\n', '\x6', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', 'O', '\n', '\a', '\x3', '\a', 
		'\x3', '\a', '\x5', '\a', 'S', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', '[', '\n', '\b', 
		'\x3', '\b', '\x3', '\b', '\x5', '\b', '_', '\n', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x5', '\n', 'h', '\n', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\a', '\v', 'p', '\n', '\v', '\f', '\v', 
		'\xE', '\v', 's', '\v', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x5', 
		'\f', 'x', '\n', '\f', '\x3', '\r', '\x3', '\r', '\a', '\r', '|', '\n', 
		'\r', '\f', '\r', '\xE', '\r', '\x7F', '\v', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\a', '\xF', '\x8A', '\n', '\xF', '\f', '\xF', 
		'\xE', '\xF', '\x8D', '\v', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\x99', '\n', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', 
		'\xA9', '\n', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x5', 
		'\x11', '\xB8', '\n', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x5', '\x12', '\xCC', '\n', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\a', '\x12', '\xDB', '\n', '\x12', '\f', '\x12', '\xE', '\x12', 
		'\xDE', '\v', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\a', 
		'\x13', '\xE3', '\n', '\x13', '\f', '\x13', '\xE', '\x13', '\xE6', '\v', 
		'\x13', '\x3', '\x13', '\x2', '\x3', '\"', '\x14', '\x2', '\x4', '\x6', 
		'\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', 
		'\x1C', '\x1E', ' ', '\"', '$', '\x2', '\x5', '\x3', '\x2', '\xF', '\x13', 
		'\x3', '\x2', '\x1B', '\x1C', '\x5', '\x2', '\x4', '\x4', '\x1E', '\x1E', 
		'!', '!', '\x2', '\xFC', '\x2', ')', '\x3', '\x2', '\x2', '\x2', '\x4', 
		'<', '\x3', '\x2', '\x2', '\x2', '\x6', '@', '\x3', '\x2', '\x2', '\x2', 
		'\b', '\x44', '\x3', '\x2', '\x2', '\x2', '\n', 'H', '\x3', '\x2', '\x2', 
		'\x2', '\f', 'J', '\x3', '\x2', '\x2', '\x2', '\xE', 'V', '\x3', '\x2', 
		'\x2', '\x2', '\x10', '\x62', '\x3', '\x2', '\x2', '\x2', '\x12', '\x64', 
		'\x3', '\x2', '\x2', '\x2', '\x14', 'l', '\x3', '\x2', '\x2', '\x2', '\x16', 
		'w', '\x3', '\x2', '\x2', '\x2', '\x18', 'y', '\x3', '\x2', '\x2', '\x2', 
		'\x1A', '\x82', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x86', '\x3', '\x2', 
		'\x2', '\x2', '\x1E', '\x8E', '\x3', '\x2', '\x2', '\x2', ' ', '\xB7', 
		'\x3', '\x2', '\x2', '\x2', '\"', '\xCB', '\x3', '\x2', '\x2', '\x2', 
		'$', '\xDF', '\x3', '\x2', '\x2', '\x2', '&', '(', '\a', ',', '\x2', '\x2', 
		'\'', '&', '\x3', '\x2', '\x2', '\x2', '(', '+', '\x3', '\x2', '\x2', 
		'\x2', ')', '\'', '\x3', '\x2', '\x2', '\x2', ')', '*', '\x3', '\x2', 
		'\x2', '\x2', '*', '/', '\x3', '\x2', '\x2', '\x2', '+', ')', '\x3', '\x2', 
		'\x2', '\x2', ',', '.', '\x5', '\x4', '\x3', '\x2', '-', ',', '\x3', '\x2', 
		'\x2', '\x2', '.', '\x31', '\x3', '\x2', '\x2', '\x2', '/', '-', '\x3', 
		'\x2', '\x2', '\x2', '/', '\x30', '\x3', '\x2', '\x2', '\x2', '\x30', 
		'\x33', '\x3', '\x2', '\x2', '\x2', '\x31', '/', '\x3', '\x2', '\x2', 
		'\x2', '\x32', '\x34', '\x5', '\x6', '\x4', '\x2', '\x33', '\x32', '\x3', 
		'\x2', '\x2', '\x2', '\x33', '\x34', '\x3', '\x2', '\x2', '\x2', '\x34', 
		'\x39', '\x3', '\x2', '\x2', '\x2', '\x35', '\x38', '\x5', ' ', '\x11', 
		'\x2', '\x36', '\x38', '\a', ',', '\x2', '\x2', '\x37', '\x35', '\x3', 
		'\x2', '\x2', '\x2', '\x37', '\x36', '\x3', '\x2', '\x2', '\x2', '\x38', 
		';', '\x3', '\x2', '\x2', '\x2', '\x39', '\x37', '\x3', '\x2', '\x2', 
		'\x2', '\x39', ':', '\x3', '\x2', '\x2', '\x2', ':', '\x3', '\x3', '\x2', 
		'\x2', '\x2', ';', '\x39', '\x3', '\x2', '\x2', '\x2', '<', '=', '\a', 
		'\a', '\x2', '\x2', '=', '>', '\a', '\x15', '\x2', '\x2', '>', '?', '\x5', 
		'\x1A', '\xE', '\x2', '?', '\x5', '\x3', '\x2', '\x2', '\x2', '@', '\x41', 
		'\x5', '\b', '\x5', '\x2', '\x41', '\a', '\x3', '\x2', '\x2', '\x2', '\x42', 
		'\x45', '\x5', '\n', '\x6', '\x2', '\x43', '\x45', '\a', '\x15', '\x2', 
		'\x2', '\x44', '\x42', '\x3', '\x2', '\x2', '\x2', '\x44', '\x43', '\x3', 
		'\x2', '\x2', '\x2', '\x45', '\t', '\x3', '\x2', '\x2', '\x2', '\x46', 
		'I', '\a', '\x14', '\x2', '\x2', 'G', 'I', '\x5', '\x18', '\r', '\x2', 
		'H', '\x46', '\x3', '\x2', '\x2', '\x2', 'H', 'G', '\x3', '\x2', '\x2', 
		'\x2', 'I', '\v', '\x3', '\x2', '\x2', '\x2', 'J', 'K', '\a', '\b', '\x2', 
		'\x2', 'K', 'N', '\a', '\x15', '\x2', '\x2', 'L', 'M', '\a', '\x18', '\x2', 
		'\x2', 'M', 'O', '\x5', '\x10', '\t', '\x2', 'N', 'L', '\x3', '\x2', '\x2', 
		'\x2', 'N', 'O', '\x3', '\x2', '\x2', '\x2', 'O', 'R', '\x3', '\x2', '\x2', 
		'\x2', 'P', 'Q', '\a', '\x3', '\x2', '\x2', 'Q', 'S', '\x5', '\"', '\x12', 
		'\x2', 'R', 'P', '\x3', '\x2', '\x2', '\x2', 'R', 'S', '\x3', '\x2', '\x2', 
		'\x2', 'S', 'T', '\x3', '\x2', '\x2', '\x2', 'T', 'U', '\a', '\x19', '\x2', 
		'\x2', 'U', '\r', '\x3', '\x2', '\x2', '\x2', 'V', 'W', '\a', '\t', '\x2', 
		'\x2', 'W', 'Z', '\a', '\x15', '\x2', '\x2', 'X', 'Y', '\a', '\x18', '\x2', 
		'\x2', 'Y', '[', '\x5', '\x10', '\t', '\x2', 'Z', 'X', '\x3', '\x2', '\x2', 
		'\x2', 'Z', '[', '\x3', '\x2', '\x2', '\x2', '[', '^', '\x3', '\x2', '\x2', 
		'\x2', '\\', ']', '\a', '\x3', '\x2', '\x2', ']', '_', '\x5', '\"', '\x12', 
		'\x2', '^', '\\', '\x3', '\x2', '\x2', '\x2', '^', '_', '\x3', '\x2', 
		'\x2', '\x2', '_', '`', '\x3', '\x2', '\x2', '\x2', '`', '\x61', '\a', 
		'\x19', '\x2', '\x2', '\x61', '\xF', '\x3', '\x2', '\x2', '\x2', '\x62', 
		'\x63', '\t', '\x2', '\x2', '\x2', '\x63', '\x11', '\x3', '\x2', '\x2', 
		'\x2', '\x64', '\x65', '\a', '\x15', '\x2', '\x2', '\x65', 'g', '\a', 
		'#', '\x2', '\x2', '\x66', 'h', '\x5', '\x14', '\v', '\x2', 'g', '\x66', 
		'\x3', '\x2', '\x2', '\x2', 'g', 'h', '\x3', '\x2', '\x2', '\x2', 'h', 
		'i', '\x3', '\x2', '\x2', '\x2', 'i', 'j', '\a', '$', '\x2', '\x2', 'j', 
		'k', '\a', '\x19', '\x2', '\x2', 'k', '\x13', '\x3', '\x2', '\x2', '\x2', 
		'l', 'q', '\x5', '\x16', '\f', '\x2', 'm', 'n', '\a', '\x1A', '\x2', '\x2', 
		'n', 'p', '\x5', '\x16', '\f', '\x2', 'o', 'm', '\x3', '\x2', '\x2', '\x2', 
		'p', 's', '\x3', '\x2', '\x2', '\x2', 'q', 'o', '\x3', '\x2', '\x2', '\x2', 
		'q', 'r', '\x3', '\x2', '\x2', '\x2', 'r', '\x15', '\x3', '\x2', '\x2', 
		'\x2', 's', 'q', '\x3', '\x2', '\x2', '\x2', 't', 'u', '\a', '-', '\x2', 
		'\x2', 'u', 'x', '\x5', '\"', '\x12', '\x2', 'v', 'x', '\x5', '\"', '\x12', 
		'\x2', 'w', 't', '\x3', '\x2', '\x2', '\x2', 'w', 'v', '\x3', '\x2', '\x2', 
		'\x2', 'x', '\x17', '\x3', '\x2', '\x2', '\x2', 'y', '}', '\a', '\'', 
		'\x2', '\x2', 'z', '|', '\x5', ' ', '\x11', '\x2', '{', 'z', '\x3', '\x2', 
		'\x2', '\x2', '|', '\x7F', '\x3', '\x2', '\x2', '\x2', '}', '{', '\x3', 
		'\x2', '\x2', '\x2', '}', '~', '\x3', '\x2', '\x2', '\x2', '~', '\x80', 
		'\x3', '\x2', '\x2', '\x2', '\x7F', '}', '\x3', '\x2', '\x2', '\x2', '\x80', 
		'\x81', '\a', '(', '\x2', '\x2', '\x81', '\x19', '\x3', '\x2', '\x2', 
		'\x2', '\x82', '\x83', '\a', '\'', '\x2', '\x2', '\x83', '\x84', '\x5', 
		'\x1C', '\xF', '\x2', '\x84', '\x85', '\a', '(', '\x2', '\x2', '\x85', 
		'\x1B', '\x3', '\x2', '\x2', '\x2', '\x86', '\x8B', '\x5', '\x1E', '\x10', 
		'\x2', '\x87', '\x88', '\a', '\x1A', '\x2', '\x2', '\x88', '\x8A', '\x5', 
		'\x1E', '\x10', '\x2', '\x89', '\x87', '\x3', '\x2', '\x2', '\x2', '\x8A', 
		'\x8D', '\x3', '\x2', '\x2', '\x2', '\x8B', '\x89', '\x3', '\x2', '\x2', 
		'\x2', '\x8B', '\x8C', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x1D', '\x3', 
		'\x2', '\x2', '\x2', '\x8D', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x8E', 
		'\x8F', '\a', '\x15', '\x2', '\x2', '\x8F', '\x90', '\a', '\x18', '\x2', 
		'\x2', '\x90', '\x91', '\x5', '\"', '\x12', '\x2', '\x91', '\x1F', '\x3', 
		'\x2', '\x2', '\x2', '\x92', '\x93', '\a', '\n', '\x2', '\x2', '\x93', 
		'\x94', '\x5', '\"', '\x12', '\x2', '\x94', '\x95', '\a', '\v', '\x2', 
		'\x2', '\x95', '\x98', '\x5', ' ', '\x11', '\x2', '\x96', '\x97', '\a', 
		'\f', '\x2', '\x2', '\x97', '\x99', '\x5', ' ', '\x11', '\x2', '\x98', 
		'\x96', '\x3', '\x2', '\x2', '\x2', '\x98', '\x99', '\x3', '\x2', '\x2', 
		'\x2', '\x99', '\xB8', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x9B', '\a', 
		'\r', '\x2', '\x2', '\x9B', '\x9C', '\a', '#', '\x2', '\x2', '\x9C', '\x9D', 
		'\a', '\x15', '\x2', '\x2', '\x9D', '\x9E', '\a', '\x3', '\x2', '\x2', 
		'\x9E', '\x9F', '\x5', '\"', '\x12', '\x2', '\x9F', '\xA0', '\a', '\x19', 
		'\x2', '\x2', '\xA0', '\xA1', '\x5', '\"', '\x12', '\x2', '\xA1', '\xA2', 
		'\a', '\x19', '\x2', '\x2', '\xA2', '\xA3', '\x5', '\"', '\x12', '\x2', 
		'\xA3', '\xA4', '\a', '$', '\x2', '\x2', '\xA4', '\xA5', '\x5', ' ', '\x11', 
		'\x2', '\xA5', '\xB8', '\x3', '\x2', '\x2', '\x2', '\xA6', '\xA8', '\a', 
		'\xE', '\x2', '\x2', '\xA7', '\xA9', '\x5', '\"', '\x12', '\x2', '\xA8', 
		'\xA7', '\x3', '\x2', '\x2', '\x2', '\xA8', '\xA9', '\x3', '\x2', '\x2', 
		'\x2', '\xA9', '\xAA', '\x3', '\x2', '\x2', '\x2', '\xAA', '\xB8', '\a', 
		'\x19', '\x2', '\x2', '\xAB', '\xB8', '\x5', '\x18', '\r', '\x2', '\xAC', 
		'\xB8', '\x5', '\f', '\a', '\x2', '\xAD', '\xB8', '\x5', '\xE', '\b', 
		'\x2', '\xAE', '\xB8', '\x5', '\x12', '\n', '\x2', '\xAF', '\xB0', '\x5', 
		'\"', '\x12', '\x2', '\xB0', '\xB1', '\a', '\x3', '\x2', '\x2', '\xB1', 
		'\xB2', '\x5', '\"', '\x12', '\x2', '\xB2', '\xB3', '\a', '\x19', '\x2', 
		'\x2', '\xB3', '\xB8', '\x3', '\x2', '\x2', '\x2', '\xB4', '\xB5', '\x5', 
		'\"', '\x12', '\x2', '\xB5', '\xB6', '\a', '\x19', '\x2', '\x2', '\xB6', 
		'\xB8', '\x3', '\x2', '\x2', '\x2', '\xB7', '\x92', '\x3', '\x2', '\x2', 
		'\x2', '\xB7', '\x9A', '\x3', '\x2', '\x2', '\x2', '\xB7', '\xA6', '\x3', 
		'\x2', '\x2', '\x2', '\xB7', '\xAB', '\x3', '\x2', '\x2', '\x2', '\xB7', 
		'\xAC', '\x3', '\x2', '\x2', '\x2', '\xB7', '\xAD', '\x3', '\x2', '\x2', 
		'\x2', '\xB7', '\xAE', '\x3', '\x2', '\x2', '\x2', '\xB7', '\xAF', '\x3', 
		'\x2', '\x2', '\x2', '\xB7', '\xB4', '\x3', '\x2', '\x2', '\x2', '\xB8', 
		'!', '\x3', '\x2', '\x2', '\x2', '\xB9', '\xBA', '\b', '\x12', '\x1', 
		'\x2', '\xBA', '\xBB', '\a', '\x15', '\x2', '\x2', '\xBB', '\xCC', '\x5', 
		'$', '\x13', '\x2', '\xBC', '\xBD', '\a', '\x1C', '\x2', '\x2', '\xBD', 
		'\xCC', '\x5', '\"', '\x12', '\f', '\xBE', '\xBF', '\a', ')', '\x2', '\x2', 
		'\xBF', '\xCC', '\x5', '\"', '\x12', '\v', '\xC0', '\xCC', '\a', '\x17', 
		'\x2', '\x2', '\xC1', '\xCC', '\a', '+', '\x2', '\x2', '\xC2', '\xC3', 
		'\a', '#', '\x2', '\x2', '\xC3', '\xC4', '\x5', '\"', '\x12', '\x2', '\xC4', 
		'\xC5', '\a', '$', '\x2', '\x2', '\xC5', '\xCC', '\x3', '\x2', '\x2', 
		'\x2', '\xC6', '\xC7', '\a', '%', '\x2', '\x2', '\xC7', '\xC8', '\x5', 
		'\"', '\x12', '\x2', '\xC8', '\xC9', '\a', '&', '\x2', '\x2', '\xC9', 
		'\xCC', '\x3', '\x2', '\x2', '\x2', '\xCA', '\xCC', '\a', '\x15', '\x2', 
		'\x2', '\xCB', '\xB9', '\x3', '\x2', '\x2', '\x2', '\xCB', '\xBC', '\x3', 
		'\x2', '\x2', '\x2', '\xCB', '\xBE', '\x3', '\x2', '\x2', '\x2', '\xCB', 
		'\xC0', '\x3', '\x2', '\x2', '\x2', '\xCB', '\xC1', '\x3', '\x2', '\x2', 
		'\x2', '\xCB', '\xC2', '\x3', '\x2', '\x2', '\x2', '\xCB', '\xC6', '\x3', 
		'\x2', '\x2', '\x2', '\xCB', '\xCA', '\x3', '\x2', '\x2', '\x2', '\xCC', 
		'\xDC', '\x3', '\x2', '\x2', '\x2', '\xCD', '\xCE', '\f', '\n', '\x2', 
		'\x2', '\xCE', '\xCF', '\a', '\x1D', '\x2', '\x2', '\xCF', '\xDB', '\x5', 
		'\"', '\x12', '\v', '\xD0', '\xD1', '\f', '\t', '\x2', '\x2', '\xD1', 
		'\xD2', '\t', '\x3', '\x2', '\x2', '\xD2', '\xDB', '\x5', '\"', '\x12', 
		'\n', '\xD3', '\xD4', '\f', '\b', '\x2', '\x2', '\xD4', '\xD5', '\t', 
		'\x4', '\x2', '\x2', '\xD5', '\xDB', '\x5', '\"', '\x12', '\t', '\xD6', 
		'\xD7', '\f', '\xE', '\x2', '\x2', '\xD7', '\xDB', '\a', '\x5', '\x2', 
		'\x2', '\xD8', '\xD9', '\f', '\r', '\x2', '\x2', '\xD9', '\xDB', '\a', 
		'\x6', '\x2', '\x2', '\xDA', '\xCD', '\x3', '\x2', '\x2', '\x2', '\xDA', 
		'\xD0', '\x3', '\x2', '\x2', '\x2', '\xDA', '\xD3', '\x3', '\x2', '\x2', 
		'\x2', '\xDA', '\xD6', '\x3', '\x2', '\x2', '\x2', '\xDA', '\xD8', '\x3', 
		'\x2', '\x2', '\x2', '\xDB', '\xDE', '\x3', '\x2', '\x2', '\x2', '\xDC', 
		'\xDA', '\x3', '\x2', '\x2', '\x2', '\xDC', '\xDD', '\x3', '\x2', '\x2', 
		'\x2', '\xDD', '#', '\x3', '\x2', '\x2', '\x2', '\xDE', '\xDC', '\x3', 
		'\x2', '\x2', '\x2', '\xDF', '\xE4', '\x5', '\"', '\x12', '\x2', '\xE0', 
		'\xE1', '\a', '\x1A', '\x2', '\x2', '\xE1', '\xE3', '\x5', '\"', '\x12', 
		'\x2', '\xE2', '\xE0', '\x3', '\x2', '\x2', '\x2', '\xE3', '\xE6', '\x3', 
		'\x2', '\x2', '\x2', '\xE4', '\xE2', '\x3', '\x2', '\x2', '\x2', '\xE4', 
		'\xE5', '\x3', '\x2', '\x2', '\x2', '\xE5', '%', '\x3', '\x2', '\x2', 
		'\x2', '\xE6', '\xE4', '\x3', '\x2', '\x2', '\x2', '\x19', ')', '/', '\x33', 
		'\x37', '\x39', '\x44', 'H', 'N', 'R', 'Z', '^', 'g', 'q', 'w', '}', '\x8B', 
		'\x98', '\xA8', '\xB7', '\xCB', '\xDA', '\xDC', '\xE4',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
