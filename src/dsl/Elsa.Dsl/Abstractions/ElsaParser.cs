//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Projects/Elsa/experimental/src/dsl/Elsa.Dsl/Dsl\ElsaParser.g4 by ANTLR 4.9.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.1")]
[System.CLSCompliant(false)]
public partial class ElsaParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		EQ=1, GREATER=2, INCREMENT=3, DECREMENT=4, NEW=5, TRIGGER=6, VARIABLE=7, 
		LET=8, IF=9, THEN=10, ELSE=11, FOR=12, RETURN=13, VOID=14, FLOAT=15, INT=16, 
		STRING=17, OBJECT=18, EXPRESSION_MARKER=19, SYMBOL=20, COLON=21, SEMICOLON=22, 
		COMMA=23, PLUS=24, MINUS=25, STAR=26, EQUALS=27, NOT_EQUALS=28, GREATER_EQUALS=29, 
		LESS=30, LESS_EQUALS=31, LAMBDA=32, PARENTHESES_OPEN=33, PARENTHESES_CLOSE=34, 
		BRACKET_OPEN=35, BRACKET_CLOSE=36, CURLYBRACE_OPEN=37, CURLYBRACE_CLOSE=38, 
		EXCLAMATION=39, PIPE=40, PIPE_DBL=41, PERIOD=42, STRING_VAL=43, BACKTICKSTRING_VAL=44, 
		LINE_COMMENT=45, INTEGER_VAL=46, ID=47, WS=48, ESC=49;
	public const int
		RULE_program = 0, RULE_trigger = 1, RULE_object = 2, RULE_newObject = 3, 
		RULE_varDecl = 4, RULE_localVarDecl = 5, RULE_type = 6, RULE_expressionMarker = 7, 
		RULE_expressionContent = 8, RULE_methodCall = 9, RULE_funcCall = 10, RULE_args = 11, 
		RULE_arg = 12, RULE_block = 13, RULE_objectInitializer = 14, RULE_propertyList = 15, 
		RULE_property = 16, RULE_stat = 17, RULE_thenStat = 18, RULE_elseStat = 19, 
		RULE_expr = 20, RULE_exprList = 21;
	public static readonly string[] ruleNames = {
		"program", "trigger", "object", "newObject", "varDecl", "localVarDecl", 
		"type", "expressionMarker", "expressionContent", "methodCall", "funcCall", 
		"args", "arg", "block", "objectInitializer", "propertyList", "property", 
		"stat", "thenStat", "elseStat", "expr", "exprList"
	};

	private static readonly string[] _LiteralNames = {
		null, "'='", "'>'", "'++'", "'--'", "'new'", "'trigger'", "'variable'", 
		"'let'", "'if'", "'then'", "'else'", "'for'", "'return'", "'void'", "'float'", 
		"'int'", "'string'", "'object'", "'expression'", null, "':'", "';'", "','", 
		"'+'", "'-'", "'*'", "'=='", "'!='", "'>='", "'<'", "'<='", "'=>'", "'('", 
		"')'", "'['", "']'", "'{'", "'}'", "'!'", "'|'", "'||'", "'.'", null, 
		null, null, null, null, null, "'\\|'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "EQ", "GREATER", "INCREMENT", "DECREMENT", "NEW", "TRIGGER", "VARIABLE", 
		"LET", "IF", "THEN", "ELSE", "FOR", "RETURN", "VOID", "FLOAT", "INT", 
		"STRING", "OBJECT", "EXPRESSION_MARKER", "SYMBOL", "COLON", "SEMICOLON", 
		"COMMA", "PLUS", "MINUS", "STAR", "EQUALS", "NOT_EQUALS", "GREATER_EQUALS", 
		"LESS", "LESS_EQUALS", "LAMBDA", "PARENTHESES_OPEN", "PARENTHESES_CLOSE", 
		"BRACKET_OPEN", "BRACKET_CLOSE", "CURLYBRACE_OPEN", "CURLYBRACE_CLOSE", 
		"EXCLAMATION", "PIPE", "PIPE_DBL", "PERIOD", "STRING_VAL", "BACKTICKSTRING_VAL", 
		"LINE_COMMENT", "INTEGER_VAL", "ID", "WS", "ESC"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ElsaParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static ElsaParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ElsaParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ElsaParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatContext[] stat() {
			return GetRuleContexts<StatContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatContext stat(int i) {
			return GetRuleContext<StatContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LINE_COMMENT() { return GetTokens(ElsaParser.LINE_COMMENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINE_COMMENT(int i) {
			return GetToken(ElsaParser.LINE_COMMENT, i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 48;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NEW) | (1L << TRIGGER) | (1L << VARIABLE) | (1L << LET) | (1L << IF) | (1L << FOR) | (1L << RETURN) | (1L << MINUS) | (1L << PARENTHESES_OPEN) | (1L << BRACKET_OPEN) | (1L << CURLYBRACE_OPEN) | (1L << EXCLAMATION) | (1L << STRING_VAL) | (1L << BACKTICKSTRING_VAL) | (1L << LINE_COMMENT) | (1L << INTEGER_VAL) | (1L << ID))) != 0)) {
				{
				State = 46;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case NEW:
				case TRIGGER:
				case VARIABLE:
				case LET:
				case IF:
				case FOR:
				case RETURN:
				case MINUS:
				case PARENTHESES_OPEN:
				case BRACKET_OPEN:
				case CURLYBRACE_OPEN:
				case EXCLAMATION:
				case STRING_VAL:
				case BACKTICKSTRING_VAL:
				case INTEGER_VAL:
				case ID:
					{
					State = 44;
					stat();
					}
					break;
				case LINE_COMMENT:
					{
					State = 45;
					Match(LINE_COMMENT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 50;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TriggerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGER() { return GetToken(ElsaParser.TRIGGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ObjectContext @object() {
			return GetRuleContext<ObjectContext>(0);
		}
		public TriggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trigger; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterTrigger(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitTrigger(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrigger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TriggerContext trigger() {
		TriggerContext _localctx = new TriggerContext(Context, State);
		EnterRule(_localctx, 2, RULE_trigger);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 51;
			Match(TRIGGER);
			State = 52;
			@object();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(ElsaParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ObjectInitializerContext objectInitializer() {
			return GetRuleContext<ObjectInitializerContext>(0);
		}
		public ObjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterObject(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitObject(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectContext @object() {
		ObjectContext _localctx = new ObjectContext(Context, State);
		EnterRule(_localctx, 4, RULE_object);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 54;
			Match(ID);
			State = 56;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				{
				State = 55;
				objectInitializer();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewObjectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(ElsaParser.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(ElsaParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTHESES_OPEN() { return GetToken(ElsaParser.PARENTHESES_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTHESES_CLOSE() { return GetToken(ElsaParser.PARENTHESES_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(ElsaParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(ElsaParser.GREATER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgsContext args() {
			return GetRuleContext<ArgsContext>(0);
		}
		public NewObjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newObject; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterNewObject(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitNewObject(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewObject(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewObjectContext newObject() {
		NewObjectContext _localctx = new NewObjectContext(Context, State);
		EnterRule(_localctx, 6, RULE_newObject);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 58;
			Match(NEW);
			State = 59;
			Match(ID);
			State = 64;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LESS) {
				{
				State = 60;
				Match(LESS);
				State = 61;
				type();
				State = 62;
				Match(GREATER);
				}
			}

			State = 66;
			Match(PARENTHESES_OPEN);
			State = 68;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NEW) | (1L << EXPRESSION_MARKER) | (1L << MINUS) | (1L << PARENTHESES_OPEN) | (1L << BRACKET_OPEN) | (1L << EXCLAMATION) | (1L << STRING_VAL) | (1L << BACKTICKSTRING_VAL) | (1L << INTEGER_VAL) | (1L << ID))) != 0)) {
				{
				State = 67;
				args();
				}
			}

			State = 70;
			Match(PARENTHESES_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(ElsaParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(ElsaParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(ElsaParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(ElsaParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public VarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterVarDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitVarDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarDeclContext varDecl() {
		VarDeclContext _localctx = new VarDeclContext(Context, State);
		EnterRule(_localctx, 8, RULE_varDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 72;
			Match(VARIABLE);
			State = 73;
			Match(ID);
			State = 76;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 74;
				Match(COLON);
				State = 75;
				type();
				}
			}

			State = 80;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQ) {
				{
				State = 78;
				Match(EQ);
				State = 79;
				expr(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LET() { return GetToken(ElsaParser.LET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(ElsaParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(ElsaParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(ElsaParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public LocalVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterLocalVarDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitLocalVarDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocalVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocalVarDeclContext localVarDecl() {
		LocalVarDeclContext _localctx = new LocalVarDeclContext(Context, State);
		EnterRule(_localctx, 10, RULE_localVarDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 82;
			Match(LET);
			State = 83;
			Match(ID);
			State = 86;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 84;
				Match(COLON);
				State = 85;
				type();
				}
			}

			State = 90;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQ) {
				{
				State = 88;
				Match(EQ);
				State = 89;
				expr(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(ElsaParser.VOID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(ElsaParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(ElsaParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBJECT() { return GetToken(ElsaParser.OBJECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(ElsaParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(ElsaParser.ID, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 12, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 92;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << VOID) | (1L << FLOAT) | (1L << INT) | (1L << STRING) | (1L << OBJECT) | (1L << ID))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionMarkerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPRESSION_MARKER() { return GetToken(ElsaParser.EXPRESSION_MARKER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTHESES_OPEN() { return GetToken(ElsaParser.PARENTHESES_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(ElsaParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(ElsaParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContentContext expressionContent() {
			return GetRuleContext<ExpressionContentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTHESES_CLOSE() { return GetToken(ElsaParser.PARENTHESES_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAMBDA() { return GetToken(ElsaParser.LAMBDA, 0); }
		public ExpressionMarkerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionMarker; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterExpressionMarker(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitExpressionMarker(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionMarker(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionMarkerContext expressionMarker() {
		ExpressionMarkerContext _localctx = new ExpressionMarkerContext(Context, State);
		EnterRule(_localctx, 14, RULE_expressionMarker);
		try {
			State = 104;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EXPRESSION_MARKER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 94;
				Match(EXPRESSION_MARKER);
				State = 95;
				Match(PARENTHESES_OPEN);
				State = 96;
				Match(ID);
				State = 97;
				Match(COMMA);
				State = 98;
				expressionContent();
				State = 99;
				Match(PARENTHESES_CLOSE);
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 101;
				Match(ID);
				State = 102;
				Match(LAMBDA);
				State = 103;
				expressionContent();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContentContext : ParserRuleContext {
		public ExpressionContentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionContent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterExpressionContent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitExpressionContent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionContent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContentContext expressionContent() {
		ExpressionContentContext _localctx = new ExpressionContentContext(Context, State);
		EnterRule(_localctx, 16, RULE_expressionContent);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 109;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 106;
					MatchWildcard();
					}
					} 
				}
				State = 111;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(ElsaParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERIOD() { return GetToken(ElsaParser.PERIOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FuncCallContext funcCall() {
			return GetRuleContext<FuncCallContext>(0);
		}
		public MethodCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterMethodCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitMethodCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodCallContext methodCall() {
		MethodCallContext _localctx = new MethodCallContext(Context, State);
		EnterRule(_localctx, 18, RULE_methodCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 112;
			Match(ID);
			State = 113;
			Match(PERIOD);
			State = 114;
			funcCall();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(ElsaParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTHESES_OPEN() { return GetToken(ElsaParser.PARENTHESES_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTHESES_CLOSE() { return GetToken(ElsaParser.PARENTHESES_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgsContext args() {
			return GetRuleContext<ArgsContext>(0);
		}
		public FuncCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterFuncCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitFuncCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncCallContext funcCall() {
		FuncCallContext _localctx = new FuncCallContext(Context, State);
		EnterRule(_localctx, 20, RULE_funcCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116;
			Match(ID);
			State = 117;
			Match(PARENTHESES_OPEN);
			State = 119;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NEW) | (1L << EXPRESSION_MARKER) | (1L << MINUS) | (1L << PARENTHESES_OPEN) | (1L << BRACKET_OPEN) | (1L << EXCLAMATION) | (1L << STRING_VAL) | (1L << BACKTICKSTRING_VAL) | (1L << INTEGER_VAL) | (1L << ID))) != 0)) {
				{
				State = 118;
				args();
				}
			}

			State = 121;
			Match(PARENTHESES_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgContext[] arg() {
			return GetRuleContexts<ArgContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgContext arg(int i) {
			return GetRuleContext<ArgContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElsaParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElsaParser.COMMA, i);
		}
		public ArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_args; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterArgs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitArgs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgsContext args() {
		ArgsContext _localctx = new ArgsContext(Context, State);
		EnterRule(_localctx, 22, RULE_args);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 123;
			arg();
			State = 128;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 124;
				Match(COMMA);
				State = 125;
				arg();
				}
				}
				State = 130;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionMarkerContext expressionMarker() {
			return GetRuleContext<ExpressionMarkerContext>(0);
		}
		public ArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterArg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitArg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgContext arg() {
		ArgContext _localctx = new ArgContext(Context, State);
		EnterRule(_localctx, 24, RULE_arg);
		try {
			State = 133;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 131;
				expr(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 132;
				expressionMarker();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURLYBRACE_OPEN() { return GetToken(ElsaParser.CURLYBRACE_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURLYBRACE_CLOSE() { return GetToken(ElsaParser.CURLYBRACE_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatContext[] stat() {
			return GetRuleContexts<StatContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatContext stat(int i) {
			return GetRuleContext<StatContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 26, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 135;
			Match(CURLYBRACE_OPEN);
			State = 139;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NEW) | (1L << TRIGGER) | (1L << VARIABLE) | (1L << LET) | (1L << IF) | (1L << FOR) | (1L << RETURN) | (1L << MINUS) | (1L << PARENTHESES_OPEN) | (1L << BRACKET_OPEN) | (1L << CURLYBRACE_OPEN) | (1L << EXCLAMATION) | (1L << STRING_VAL) | (1L << BACKTICKSTRING_VAL) | (1L << INTEGER_VAL) | (1L << ID))) != 0)) {
				{
				{
				State = 136;
				stat();
				}
				}
				State = 141;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 142;
			Match(CURLYBRACE_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectInitializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURLYBRACE_OPEN() { return GetToken(ElsaParser.CURLYBRACE_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURLYBRACE_CLOSE() { return GetToken(ElsaParser.CURLYBRACE_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PropertyListContext propertyList() {
			return GetRuleContext<PropertyListContext>(0);
		}
		public ObjectInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectInitializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterObjectInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitObjectInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectInitializerContext objectInitializer() {
		ObjectInitializerContext _localctx = new ObjectInitializerContext(Context, State);
		EnterRule(_localctx, 28, RULE_objectInitializer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144;
			Match(CURLYBRACE_OPEN);
			State = 146;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ID) {
				{
				State = 145;
				propertyList();
				}
			}

			State = 148;
			Match(CURLYBRACE_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext[] property() {
			return GetRuleContexts<PropertyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext property(int i) {
			return GetRuleContext<PropertyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElsaParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElsaParser.COMMA, i);
		}
		public PropertyListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterPropertyList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitPropertyList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyListContext propertyList() {
		PropertyListContext _localctx = new PropertyListContext(Context, State);
		EnterRule(_localctx, 30, RULE_propertyList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 150;
			property();
			State = 155;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 151;
				Match(COMMA);
				State = 152;
				property();
				}
				}
				State = 157;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(ElsaParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(ElsaParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public PropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterProperty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitProperty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyContext property() {
		PropertyContext _localctx = new PropertyContext(Context, State);
		EnterRule(_localctx, 32, RULE_property);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 158;
			Match(ID);
			State = 159;
			Match(COLON);
			State = 160;
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatContext : ParserRuleContext {
		public StatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat; } }
	 
		public StatContext() { }
		public virtual void CopyFrom(StatContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IfStatContext : StatContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(ElsaParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(ElsaParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ThenStatContext thenStat() {
			return GetRuleContext<ThenStatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(ElsaParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ElseStatContext elseStat() {
			return GetRuleContext<ElseStatContext>(0);
		}
		public IfStatContext(StatContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterIfStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitIfStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BlockStatContext : StatContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public BlockStatContext(StatContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterBlockStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitBlockStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionStatContext : StatContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(ElsaParser.SEMICOLON, 0); }
		public ExpressionStatContext(StatContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterExpressionStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitExpressionStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TriggerStatContext : StatContext {
		[System.Diagnostics.DebuggerNonUserCode] public TriggerContext trigger() {
			return GetRuleContext<TriggerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(ElsaParser.SEMICOLON, 0); }
		public TriggerStatContext(StatContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterTriggerStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitTriggerStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTriggerStat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ObjectStatContext : StatContext {
		[System.Diagnostics.DebuggerNonUserCode] public ObjectContext @object() {
			return GetRuleContext<ObjectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(ElsaParser.SEMICOLON, 0); }
		public ObjectStatContext(StatContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterObjectStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitObjectStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectStat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReturnStatContext : StatContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(ElsaParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(ElsaParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ReturnStatContext(StatContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterReturnStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitReturnStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableDeclarationStatContext : StatContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext varDecl() {
			return GetRuleContext<VarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(ElsaParser.SEMICOLON, 0); }
		public VariableDeclarationStatContext(StatContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclarationStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclarationStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarationStat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignmentStatContext : StatContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(ElsaParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(ElsaParser.SEMICOLON, 0); }
		public AssignmentStatContext(StatContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterAssignmentStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitAssignmentStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentStat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LocalVariableDeclarationStatContext : StatContext {
		[System.Diagnostics.DebuggerNonUserCode] public LocalVarDeclContext localVarDecl() {
			return GetRuleContext<LocalVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(ElsaParser.SEMICOLON, 0); }
		public LocalVariableDeclarationStatContext(StatContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterLocalVariableDeclarationStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitLocalVariableDeclarationStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocalVariableDeclarationStat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForStatContext : StatContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(ElsaParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTHESES_OPEN() { return GetToken(ElsaParser.PARENTHESES_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(ElsaParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(ElsaParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(ElsaParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(ElsaParser.SEMICOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTHESES_CLOSE() { return GetToken(ElsaParser.PARENTHESES_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatContext stat() {
			return GetRuleContext<StatContext>(0);
		}
		public ForStatContext(StatContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterForStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitForStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatContext stat() {
		StatContext _localctx = new StatContext(Context, State);
		EnterRule(_localctx, 34, RULE_stat);
		int _la;
		try {
			State = 208;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				_localctx = new TriggerStatContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 162;
				trigger();
				State = 163;
				Match(SEMICOLON);
				}
				break;
			case 2:
				_localctx = new ObjectStatContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 165;
				@object();
				State = 166;
				Match(SEMICOLON);
				}
				break;
			case 3:
				_localctx = new IfStatContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 168;
				Match(IF);
				State = 169;
				expr(0);
				State = 170;
				Match(THEN);
				State = 171;
				thenStat();
				State = 174;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
				case 1:
					{
					State = 172;
					Match(ELSE);
					State = 173;
					elseStat();
					}
					break;
				}
				}
				break;
			case 4:
				_localctx = new ForStatContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 176;
				Match(FOR);
				State = 177;
				Match(PARENTHESES_OPEN);
				State = 178;
				Match(ID);
				State = 179;
				Match(EQ);
				State = 180;
				expr(0);
				State = 181;
				Match(SEMICOLON);
				State = 182;
				expr(0);
				State = 183;
				Match(SEMICOLON);
				State = 184;
				expr(0);
				State = 185;
				Match(PARENTHESES_CLOSE);
				State = 186;
				stat();
				}
				break;
			case 5:
				_localctx = new ReturnStatContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 188;
				Match(RETURN);
				State = 190;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NEW) | (1L << MINUS) | (1L << PARENTHESES_OPEN) | (1L << BRACKET_OPEN) | (1L << EXCLAMATION) | (1L << STRING_VAL) | (1L << BACKTICKSTRING_VAL) | (1L << INTEGER_VAL) | (1L << ID))) != 0)) {
					{
					State = 189;
					expr(0);
					}
				}

				State = 192;
				Match(SEMICOLON);
				}
				break;
			case 6:
				_localctx = new BlockStatContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 193;
				block();
				}
				break;
			case 7:
				_localctx = new VariableDeclarationStatContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 194;
				varDecl();
				State = 195;
				Match(SEMICOLON);
				}
				break;
			case 8:
				_localctx = new LocalVariableDeclarationStatContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 197;
				localVarDecl();
				State = 198;
				Match(SEMICOLON);
				}
				break;
			case 9:
				_localctx = new AssignmentStatContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 200;
				expr(0);
				State = 201;
				Match(EQ);
				State = 202;
				expr(0);
				State = 203;
				Match(SEMICOLON);
				}
				break;
			case 10:
				_localctx = new ExpressionStatContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 205;
				expr(0);
				State = 206;
				Match(SEMICOLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThenStatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatContext stat() {
			return GetRuleContext<StatContext>(0);
		}
		public ThenStatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_thenStat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterThenStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitThenStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThenStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ThenStatContext thenStat() {
		ThenStatContext _localctx = new ThenStatContext(Context, State);
		EnterRule(_localctx, 36, RULE_thenStat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 210;
			stat();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseStatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatContext stat() {
			return GetRuleContext<StatContext>(0);
		}
		public ElseStatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseStat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterElseStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitElseStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseStatContext elseStat() {
		ElseStatContext _localctx = new ElseStatContext(Context, State);
		EnterRule(_localctx, 38, RULE_elseStat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 212;
			stat();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NewObjectExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public NewObjectContext newObject() {
			return GetRuleContext<NewObjectContext>(0);
		}
		public NewObjectExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterNewObjectExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitNewObjectExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewObjectExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubtractExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(ElsaParser.MINUS, 0); }
		public SubtractExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterSubtractExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitSubtractExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubtractExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IncrementExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCREMENT() { return GetToken(ElsaParser.INCREMENT, 0); }
		public IncrementExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterIncrementExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitIncrementExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIncrementExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ObjectExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ObjectContext @object() {
			return GetRuleContext<ObjectContext>(0);
		}
		public ObjectExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterObjectExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitObjectExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringValueExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_VAL() { return GetToken(ElsaParser.STRING_VAL, 0); }
		public StringValueExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterStringValueExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitStringValueExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringValueExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplyExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(ElsaParser.STAR, 0); }
		public MultiplyExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterMultiplyExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitMultiplyExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplyExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesesExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTHESES_OPEN() { return GetToken(ElsaParser.PARENTHESES_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTHESES_CLOSE() { return GetToken(ElsaParser.PARENTHESES_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprListContext exprList() {
			return GetRuleContext<ExprListContext>(0);
		}
		public ParenthesesExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterParenthesesExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitParenthesesExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesesExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public FuncCallContext funcCall() {
			return GetRuleContext<FuncCallContext>(0);
		}
		public FunctionExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterFunctionExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitFunctionExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DecrementExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECREMENT() { return GetToken(ElsaParser.DECREMENT, 0); }
		public DecrementExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterDecrementExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitDecrementExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecrementExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NegateExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(ElsaParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public NegateExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterNegateExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitNegateExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegateExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MethodCallExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public MethodCallContext methodCall() {
			return GetRuleContext<MethodCallContext>(0);
		}
		public MethodCallExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterMethodCallExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitMethodCallExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodCallExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(ElsaParser.ID, 0); }
		public VariableExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterVariableExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitVariableExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLAMATION() { return GetToken(ElsaParser.EXCLAMATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public NotExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterNotExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitNotExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntegerValueExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_VAL() { return GetToken(ElsaParser.INTEGER_VAL, 0); }
		public IntegerValueExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterIntegerValueExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitIntegerValueExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegerValueExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(ElsaParser.PLUS, 0); }
		public AddExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterAddExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitAddExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BackTickStringValueExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BACKTICKSTRING_VAL() { return GetToken(ElsaParser.BACKTICKSTRING_VAL, 0); }
		public BackTickStringValueExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterBackTickStringValueExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitBackTickStringValueExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBackTickStringValueExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BracketsExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BRACKET_OPEN() { return GetToken(ElsaParser.BRACKET_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BRACKET_CLOSE() { return GetToken(ElsaParser.BRACKET_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprListContext exprList() {
			return GetRuleContext<ExprListContext>(0);
		}
		public BracketsExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterBracketsExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitBracketsExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBracketsExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CompareExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(ElsaParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(ElsaParser.GREATER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(ElsaParser.LESS, 0); }
		public CompareExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterCompareExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitCompareExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompareExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 40;
		EnterRecursionRule(_localctx, 40, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 237;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				{
				_localctx = new FunctionExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 215;
				funcCall();
				}
				break;
			case 2:
				{
				_localctx = new ObjectExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 216;
				@object();
				}
				break;
			case 3:
				{
				_localctx = new NewObjectExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 217;
				newObject();
				}
				break;
			case 4:
				{
				_localctx = new NegateExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 218;
				Match(MINUS);
				State = 219;
				expr(13);
				}
				break;
			case 5:
				{
				_localctx = new NotExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 220;
				Match(EXCLAMATION);
				State = 221;
				expr(12);
				}
				break;
			case 6:
				{
				_localctx = new IntegerValueExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 222;
				Match(INTEGER_VAL);
				}
				break;
			case 7:
				{
				_localctx = new StringValueExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 223;
				Match(STRING_VAL);
				}
				break;
			case 8:
				{
				_localctx = new BackTickStringValueExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 224;
				Match(BACKTICKSTRING_VAL);
				}
				break;
			case 9:
				{
				_localctx = new ParenthesesExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 225;
				Match(PARENTHESES_OPEN);
				State = 227;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NEW) | (1L << MINUS) | (1L << PARENTHESES_OPEN) | (1L << BRACKET_OPEN) | (1L << EXCLAMATION) | (1L << STRING_VAL) | (1L << BACKTICKSTRING_VAL) | (1L << INTEGER_VAL) | (1L << ID))) != 0)) {
					{
					State = 226;
					exprList();
					}
				}

				State = 229;
				Match(PARENTHESES_CLOSE);
				}
				break;
			case 10:
				{
				_localctx = new BracketsExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 230;
				Match(BRACKET_OPEN);
				State = 232;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NEW) | (1L << MINUS) | (1L << PARENTHESES_OPEN) | (1L << BRACKET_OPEN) | (1L << EXCLAMATION) | (1L << STRING_VAL) | (1L << BACKTICKSTRING_VAL) | (1L << INTEGER_VAL) | (1L << ID))) != 0)) {
					{
					State = 231;
					exprList();
					}
				}

				State = 234;
				Match(BRACKET_CLOSE);
				}
				break;
			case 11:
				{
				_localctx = new MethodCallExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 235;
				methodCall();
				}
				break;
			case 12:
				{
				_localctx = new VariableExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 236;
				Match(ID);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 257;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 255;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
					case 1:
						{
						_localctx = new MultiplyExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 239;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 240;
						Match(STAR);
						State = 241;
						expr(12);
						}
						break;
					case 2:
						{
						_localctx = new AddExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 242;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 243;
						Match(PLUS);
						State = 244;
						expr(11);
						}
						break;
					case 3:
						{
						_localctx = new SubtractExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 245;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 246;
						Match(MINUS);
						State = 247;
						expr(10);
						}
						break;
					case 4:
						{
						_localctx = new CompareExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 248;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 249;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GREATER) | (1L << EQUALS) | (1L << LESS))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 250;
						expr(9);
						}
						break;
					case 5:
						{
						_localctx = new IncrementExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 251;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 252;
						Match(INCREMENT);
						}
						break;
					case 6:
						{
						_localctx = new DecrementExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 253;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 254;
						Match(DECREMENT);
						}
						break;
					}
					} 
				}
				State = 259;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExprListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElsaParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElsaParser.COMMA, i);
		}
		public ExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterExprList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitExprList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprListContext exprList() {
		ExprListContext _localctx = new ExprListContext(Context, State);
		EnterRule(_localctx, 42, RULE_exprList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 260;
			expr(0);
			State = 265;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 261;
				Match(COMMA);
				State = 262;
				expr(0);
				}
				}
				State = 267;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 20: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 11);
		case 1: return Precpred(Context, 10);
		case 2: return Precpred(Context, 9);
		case 3: return Precpred(Context, 8);
		case 4: return Precpred(Context, 15);
		case 5: return Precpred(Context, 14);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x33', '\x10F', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x3', '\x2', '\x3', 
		'\x2', '\a', '\x2', '\x31', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '\x34', 
		'\v', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', 
		'\x4', '\x5', '\x4', ';', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\x43', 
		'\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 'G', '\n', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x5', '\x6', 'O', '\n', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x5', '\x6', 'S', '\n', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x5', '\a', 'Y', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x5', 
		'\a', ']', '\n', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', 'k', '\n', '\t', '\x3', '\n', 
		'\a', '\n', 'n', '\n', '\n', '\f', '\n', '\xE', '\n', 'q', '\v', '\n', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x5', '\f', 'z', '\n', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\a', '\r', '\x81', '\n', '\r', 
		'\f', '\r', '\xE', '\r', '\x84', '\v', '\r', '\x3', '\xE', '\x3', '\xE', 
		'\x5', '\xE', '\x88', '\n', '\xE', '\x3', '\xF', '\x3', '\xF', '\a', '\xF', 
		'\x8C', '\n', '\xF', '\f', '\xF', '\xE', '\xF', '\x8F', '\v', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\x95', 
		'\n', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\a', '\x11', '\x9C', '\n', '\x11', '\f', '\x11', '\xE', 
		'\x11', '\x9F', '\v', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\xB1', '\n', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x5', 
		'\x13', '\xC1', '\n', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\xD3', '\n', 
		'\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x5', '\x16', '\xE6', '\n', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x5', '\x16', '\xEB', '\n', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x5', '\x16', '\xF0', 
		'\n', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\a', '\x16', '\x102', '\n', '\x16', '\f', 
		'\x16', '\xE', '\x16', '\x105', '\v', '\x16', '\x3', '\x17', '\x3', '\x17', 
		'\x3', '\x17', '\a', '\x17', '\x10A', '\n', '\x17', '\f', '\x17', '\xE', 
		'\x17', '\x10D', '\v', '\x17', '\x3', '\x17', '\x3', 'o', '\x3', '*', 
		'\x18', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', 
		'\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', 
		'*', ',', '\x2', '\x4', '\x4', '\x2', '\x10', '\x14', '\x31', '\x31', 
		'\x5', '\x2', '\x4', '\x4', '\x1D', '\x1D', ' ', ' ', '\x2', '\x128', 
		'\x2', '\x32', '\x3', '\x2', '\x2', '\x2', '\x4', '\x35', '\x3', '\x2', 
		'\x2', '\x2', '\x6', '\x38', '\x3', '\x2', '\x2', '\x2', '\b', '<', '\x3', 
		'\x2', '\x2', '\x2', '\n', 'J', '\x3', '\x2', '\x2', '\x2', '\f', 'T', 
		'\x3', '\x2', '\x2', '\x2', '\xE', '^', '\x3', '\x2', '\x2', '\x2', '\x10', 
		'j', '\x3', '\x2', '\x2', '\x2', '\x12', 'o', '\x3', '\x2', '\x2', '\x2', 
		'\x14', 'r', '\x3', '\x2', '\x2', '\x2', '\x16', 'v', '\x3', '\x2', '\x2', 
		'\x2', '\x18', '}', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x87', '\x3', 
		'\x2', '\x2', '\x2', '\x1C', '\x89', '\x3', '\x2', '\x2', '\x2', '\x1E', 
		'\x92', '\x3', '\x2', '\x2', '\x2', ' ', '\x98', '\x3', '\x2', '\x2', 
		'\x2', '\"', '\xA0', '\x3', '\x2', '\x2', '\x2', '$', '\xD2', '\x3', '\x2', 
		'\x2', '\x2', '&', '\xD4', '\x3', '\x2', '\x2', '\x2', '(', '\xD6', '\x3', 
		'\x2', '\x2', '\x2', '*', '\xEF', '\x3', '\x2', '\x2', '\x2', ',', '\x106', 
		'\x3', '\x2', '\x2', '\x2', '.', '\x31', '\x5', '$', '\x13', '\x2', '/', 
		'\x31', '\a', '/', '\x2', '\x2', '\x30', '.', '\x3', '\x2', '\x2', '\x2', 
		'\x30', '/', '\x3', '\x2', '\x2', '\x2', '\x31', '\x34', '\x3', '\x2', 
		'\x2', '\x2', '\x32', '\x30', '\x3', '\x2', '\x2', '\x2', '\x32', '\x33', 
		'\x3', '\x2', '\x2', '\x2', '\x33', '\x3', '\x3', '\x2', '\x2', '\x2', 
		'\x34', '\x32', '\x3', '\x2', '\x2', '\x2', '\x35', '\x36', '\a', '\b', 
		'\x2', '\x2', '\x36', '\x37', '\x5', '\x6', '\x4', '\x2', '\x37', '\x5', 
		'\x3', '\x2', '\x2', '\x2', '\x38', ':', '\a', '\x31', '\x2', '\x2', '\x39', 
		';', '\x5', '\x1E', '\x10', '\x2', ':', '\x39', '\x3', '\x2', '\x2', '\x2', 
		':', ';', '\x3', '\x2', '\x2', '\x2', ';', '\a', '\x3', '\x2', '\x2', 
		'\x2', '<', '=', '\a', '\a', '\x2', '\x2', '=', '\x42', '\a', '\x31', 
		'\x2', '\x2', '>', '?', '\a', ' ', '\x2', '\x2', '?', '@', '\x5', '\xE', 
		'\b', '\x2', '@', '\x41', '\a', '\x4', '\x2', '\x2', '\x41', '\x43', '\x3', 
		'\x2', '\x2', '\x2', '\x42', '>', '\x3', '\x2', '\x2', '\x2', '\x42', 
		'\x43', '\x3', '\x2', '\x2', '\x2', '\x43', '\x44', '\x3', '\x2', '\x2', 
		'\x2', '\x44', '\x46', '\a', '#', '\x2', '\x2', '\x45', 'G', '\x5', '\x18', 
		'\r', '\x2', '\x46', '\x45', '\x3', '\x2', '\x2', '\x2', '\x46', 'G', 
		'\x3', '\x2', '\x2', '\x2', 'G', 'H', '\x3', '\x2', '\x2', '\x2', 'H', 
		'I', '\a', '$', '\x2', '\x2', 'I', '\t', '\x3', '\x2', '\x2', '\x2', 'J', 
		'K', '\a', '\t', '\x2', '\x2', 'K', 'N', '\a', '\x31', '\x2', '\x2', 'L', 
		'M', '\a', '\x17', '\x2', '\x2', 'M', 'O', '\x5', '\xE', '\b', '\x2', 
		'N', 'L', '\x3', '\x2', '\x2', '\x2', 'N', 'O', '\x3', '\x2', '\x2', '\x2', 
		'O', 'R', '\x3', '\x2', '\x2', '\x2', 'P', 'Q', '\a', '\x3', '\x2', '\x2', 
		'Q', 'S', '\x5', '*', '\x16', '\x2', 'R', 'P', '\x3', '\x2', '\x2', '\x2', 
		'R', 'S', '\x3', '\x2', '\x2', '\x2', 'S', '\v', '\x3', '\x2', '\x2', 
		'\x2', 'T', 'U', '\a', '\n', '\x2', '\x2', 'U', 'X', '\a', '\x31', '\x2', 
		'\x2', 'V', 'W', '\a', '\x17', '\x2', '\x2', 'W', 'Y', '\x5', '\xE', '\b', 
		'\x2', 'X', 'V', '\x3', '\x2', '\x2', '\x2', 'X', 'Y', '\x3', '\x2', '\x2', 
		'\x2', 'Y', '\\', '\x3', '\x2', '\x2', '\x2', 'Z', '[', '\a', '\x3', '\x2', 
		'\x2', '[', ']', '\x5', '*', '\x16', '\x2', '\\', 'Z', '\x3', '\x2', '\x2', 
		'\x2', '\\', ']', '\x3', '\x2', '\x2', '\x2', ']', '\r', '\x3', '\x2', 
		'\x2', '\x2', '^', '_', '\t', '\x2', '\x2', '\x2', '_', '\xF', '\x3', 
		'\x2', '\x2', '\x2', '`', '\x61', '\a', '\x15', '\x2', '\x2', '\x61', 
		'\x62', '\a', '#', '\x2', '\x2', '\x62', '\x63', '\a', '\x31', '\x2', 
		'\x2', '\x63', '\x64', '\a', '\x19', '\x2', '\x2', '\x64', '\x65', '\x5', 
		'\x12', '\n', '\x2', '\x65', '\x66', '\a', '$', '\x2', '\x2', '\x66', 
		'k', '\x3', '\x2', '\x2', '\x2', 'g', 'h', '\a', '\x31', '\x2', '\x2', 
		'h', 'i', '\a', '\"', '\x2', '\x2', 'i', 'k', '\x5', '\x12', '\n', '\x2', 
		'j', '`', '\x3', '\x2', '\x2', '\x2', 'j', 'g', '\x3', '\x2', '\x2', '\x2', 
		'k', '\x11', '\x3', '\x2', '\x2', '\x2', 'l', 'n', '\v', '\x2', '\x2', 
		'\x2', 'm', 'l', '\x3', '\x2', '\x2', '\x2', 'n', 'q', '\x3', '\x2', '\x2', 
		'\x2', 'o', 'p', '\x3', '\x2', '\x2', '\x2', 'o', 'm', '\x3', '\x2', '\x2', 
		'\x2', 'p', '\x13', '\x3', '\x2', '\x2', '\x2', 'q', 'o', '\x3', '\x2', 
		'\x2', '\x2', 'r', 's', '\a', '\x31', '\x2', '\x2', 's', 't', '\a', ',', 
		'\x2', '\x2', 't', 'u', '\x5', '\x16', '\f', '\x2', 'u', '\x15', '\x3', 
		'\x2', '\x2', '\x2', 'v', 'w', '\a', '\x31', '\x2', '\x2', 'w', 'y', '\a', 
		'#', '\x2', '\x2', 'x', 'z', '\x5', '\x18', '\r', '\x2', 'y', 'x', '\x3', 
		'\x2', '\x2', '\x2', 'y', 'z', '\x3', '\x2', '\x2', '\x2', 'z', '{', '\x3', 
		'\x2', '\x2', '\x2', '{', '|', '\a', '$', '\x2', '\x2', '|', '\x17', '\x3', 
		'\x2', '\x2', '\x2', '}', '\x82', '\x5', '\x1A', '\xE', '\x2', '~', '\x7F', 
		'\a', '\x19', '\x2', '\x2', '\x7F', '\x81', '\x5', '\x1A', '\xE', '\x2', 
		'\x80', '~', '\x3', '\x2', '\x2', '\x2', '\x81', '\x84', '\x3', '\x2', 
		'\x2', '\x2', '\x82', '\x80', '\x3', '\x2', '\x2', '\x2', '\x82', '\x83', 
		'\x3', '\x2', '\x2', '\x2', '\x83', '\x19', '\x3', '\x2', '\x2', '\x2', 
		'\x84', '\x82', '\x3', '\x2', '\x2', '\x2', '\x85', '\x88', '\x5', '*', 
		'\x16', '\x2', '\x86', '\x88', '\x5', '\x10', '\t', '\x2', '\x87', '\x85', 
		'\x3', '\x2', '\x2', '\x2', '\x87', '\x86', '\x3', '\x2', '\x2', '\x2', 
		'\x88', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x89', '\x8D', '\a', '\'', 
		'\x2', '\x2', '\x8A', '\x8C', '\x5', '$', '\x13', '\x2', '\x8B', '\x8A', 
		'\x3', '\x2', '\x2', '\x2', '\x8C', '\x8F', '\x3', '\x2', '\x2', '\x2', 
		'\x8D', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x8D', '\x8E', '\x3', '\x2', 
		'\x2', '\x2', '\x8E', '\x90', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x8D', 
		'\x3', '\x2', '\x2', '\x2', '\x90', '\x91', '\a', '(', '\x2', '\x2', '\x91', 
		'\x1D', '\x3', '\x2', '\x2', '\x2', '\x92', '\x94', '\a', '\'', '\x2', 
		'\x2', '\x93', '\x95', '\x5', ' ', '\x11', '\x2', '\x94', '\x93', '\x3', 
		'\x2', '\x2', '\x2', '\x94', '\x95', '\x3', '\x2', '\x2', '\x2', '\x95', 
		'\x96', '\x3', '\x2', '\x2', '\x2', '\x96', '\x97', '\a', '(', '\x2', 
		'\x2', '\x97', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x98', '\x9D', '\x5', 
		'\"', '\x12', '\x2', '\x99', '\x9A', '\a', '\x19', '\x2', '\x2', '\x9A', 
		'\x9C', '\x5', '\"', '\x12', '\x2', '\x9B', '\x99', '\x3', '\x2', '\x2', 
		'\x2', '\x9C', '\x9F', '\x3', '\x2', '\x2', '\x2', '\x9D', '\x9B', '\x3', 
		'\x2', '\x2', '\x2', '\x9D', '\x9E', '\x3', '\x2', '\x2', '\x2', '\x9E', 
		'!', '\x3', '\x2', '\x2', '\x2', '\x9F', '\x9D', '\x3', '\x2', '\x2', 
		'\x2', '\xA0', '\xA1', '\a', '\x31', '\x2', '\x2', '\xA1', '\xA2', '\a', 
		'\x17', '\x2', '\x2', '\xA2', '\xA3', '\x5', '*', '\x16', '\x2', '\xA3', 
		'#', '\x3', '\x2', '\x2', '\x2', '\xA4', '\xA5', '\x5', '\x4', '\x3', 
		'\x2', '\xA5', '\xA6', '\a', '\x18', '\x2', '\x2', '\xA6', '\xD3', '\x3', 
		'\x2', '\x2', '\x2', '\xA7', '\xA8', '\x5', '\x6', '\x4', '\x2', '\xA8', 
		'\xA9', '\a', '\x18', '\x2', '\x2', '\xA9', '\xD3', '\x3', '\x2', '\x2', 
		'\x2', '\xAA', '\xAB', '\a', '\v', '\x2', '\x2', '\xAB', '\xAC', '\x5', 
		'*', '\x16', '\x2', '\xAC', '\xAD', '\a', '\f', '\x2', '\x2', '\xAD', 
		'\xB0', '\x5', '&', '\x14', '\x2', '\xAE', '\xAF', '\a', '\r', '\x2', 
		'\x2', '\xAF', '\xB1', '\x5', '(', '\x15', '\x2', '\xB0', '\xAE', '\x3', 
		'\x2', '\x2', '\x2', '\xB0', '\xB1', '\x3', '\x2', '\x2', '\x2', '\xB1', 
		'\xD3', '\x3', '\x2', '\x2', '\x2', '\xB2', '\xB3', '\a', '\xE', '\x2', 
		'\x2', '\xB3', '\xB4', '\a', '#', '\x2', '\x2', '\xB4', '\xB5', '\a', 
		'\x31', '\x2', '\x2', '\xB5', '\xB6', '\a', '\x3', '\x2', '\x2', '\xB6', 
		'\xB7', '\x5', '*', '\x16', '\x2', '\xB7', '\xB8', '\a', '\x18', '\x2', 
		'\x2', '\xB8', '\xB9', '\x5', '*', '\x16', '\x2', '\xB9', '\xBA', '\a', 
		'\x18', '\x2', '\x2', '\xBA', '\xBB', '\x5', '*', '\x16', '\x2', '\xBB', 
		'\xBC', '\a', '$', '\x2', '\x2', '\xBC', '\xBD', '\x5', '$', '\x13', '\x2', 
		'\xBD', '\xD3', '\x3', '\x2', '\x2', '\x2', '\xBE', '\xC0', '\a', '\xF', 
		'\x2', '\x2', '\xBF', '\xC1', '\x5', '*', '\x16', '\x2', '\xC0', '\xBF', 
		'\x3', '\x2', '\x2', '\x2', '\xC0', '\xC1', '\x3', '\x2', '\x2', '\x2', 
		'\xC1', '\xC2', '\x3', '\x2', '\x2', '\x2', '\xC2', '\xD3', '\a', '\x18', 
		'\x2', '\x2', '\xC3', '\xD3', '\x5', '\x1C', '\xF', '\x2', '\xC4', '\xC5', 
		'\x5', '\n', '\x6', '\x2', '\xC5', '\xC6', '\a', '\x18', '\x2', '\x2', 
		'\xC6', '\xD3', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xC8', '\x5', '\f', 
		'\a', '\x2', '\xC8', '\xC9', '\a', '\x18', '\x2', '\x2', '\xC9', '\xD3', 
		'\x3', '\x2', '\x2', '\x2', '\xCA', '\xCB', '\x5', '*', '\x16', '\x2', 
		'\xCB', '\xCC', '\a', '\x3', '\x2', '\x2', '\xCC', '\xCD', '\x5', '*', 
		'\x16', '\x2', '\xCD', '\xCE', '\a', '\x18', '\x2', '\x2', '\xCE', '\xD3', 
		'\x3', '\x2', '\x2', '\x2', '\xCF', '\xD0', '\x5', '*', '\x16', '\x2', 
		'\xD0', '\xD1', '\a', '\x18', '\x2', '\x2', '\xD1', '\xD3', '\x3', '\x2', 
		'\x2', '\x2', '\xD2', '\xA4', '\x3', '\x2', '\x2', '\x2', '\xD2', '\xA7', 
		'\x3', '\x2', '\x2', '\x2', '\xD2', '\xAA', '\x3', '\x2', '\x2', '\x2', 
		'\xD2', '\xB2', '\x3', '\x2', '\x2', '\x2', '\xD2', '\xBE', '\x3', '\x2', 
		'\x2', '\x2', '\xD2', '\xC3', '\x3', '\x2', '\x2', '\x2', '\xD2', '\xC4', 
		'\x3', '\x2', '\x2', '\x2', '\xD2', '\xC7', '\x3', '\x2', '\x2', '\x2', 
		'\xD2', '\xCA', '\x3', '\x2', '\x2', '\x2', '\xD2', '\xCF', '\x3', '\x2', 
		'\x2', '\x2', '\xD3', '%', '\x3', '\x2', '\x2', '\x2', '\xD4', '\xD5', 
		'\x5', '$', '\x13', '\x2', '\xD5', '\'', '\x3', '\x2', '\x2', '\x2', '\xD6', 
		'\xD7', '\x5', '$', '\x13', '\x2', '\xD7', ')', '\x3', '\x2', '\x2', '\x2', 
		'\xD8', '\xD9', '\b', '\x16', '\x1', '\x2', '\xD9', '\xF0', '\x5', '\x16', 
		'\f', '\x2', '\xDA', '\xF0', '\x5', '\x6', '\x4', '\x2', '\xDB', '\xF0', 
		'\x5', '\b', '\x5', '\x2', '\xDC', '\xDD', '\a', '\x1B', '\x2', '\x2', 
		'\xDD', '\xF0', '\x5', '*', '\x16', '\xF', '\xDE', '\xDF', '\a', ')', 
		'\x2', '\x2', '\xDF', '\xF0', '\x5', '*', '\x16', '\xE', '\xE0', '\xF0', 
		'\a', '\x30', '\x2', '\x2', '\xE1', '\xF0', '\a', '-', '\x2', '\x2', '\xE2', 
		'\xF0', '\a', '.', '\x2', '\x2', '\xE3', '\xE5', '\a', '#', '\x2', '\x2', 
		'\xE4', '\xE6', '\x5', ',', '\x17', '\x2', '\xE5', '\xE4', '\x3', '\x2', 
		'\x2', '\x2', '\xE5', '\xE6', '\x3', '\x2', '\x2', '\x2', '\xE6', '\xE7', 
		'\x3', '\x2', '\x2', '\x2', '\xE7', '\xF0', '\a', '$', '\x2', '\x2', '\xE8', 
		'\xEA', '\a', '%', '\x2', '\x2', '\xE9', '\xEB', '\x5', ',', '\x17', '\x2', 
		'\xEA', '\xE9', '\x3', '\x2', '\x2', '\x2', '\xEA', '\xEB', '\x3', '\x2', 
		'\x2', '\x2', '\xEB', '\xEC', '\x3', '\x2', '\x2', '\x2', '\xEC', '\xF0', 
		'\a', '&', '\x2', '\x2', '\xED', '\xF0', '\x5', '\x14', '\v', '\x2', '\xEE', 
		'\xF0', '\a', '\x31', '\x2', '\x2', '\xEF', '\xD8', '\x3', '\x2', '\x2', 
		'\x2', '\xEF', '\xDA', '\x3', '\x2', '\x2', '\x2', '\xEF', '\xDB', '\x3', 
		'\x2', '\x2', '\x2', '\xEF', '\xDC', '\x3', '\x2', '\x2', '\x2', '\xEF', 
		'\xDE', '\x3', '\x2', '\x2', '\x2', '\xEF', '\xE0', '\x3', '\x2', '\x2', 
		'\x2', '\xEF', '\xE1', '\x3', '\x2', '\x2', '\x2', '\xEF', '\xE2', '\x3', 
		'\x2', '\x2', '\x2', '\xEF', '\xE3', '\x3', '\x2', '\x2', '\x2', '\xEF', 
		'\xE8', '\x3', '\x2', '\x2', '\x2', '\xEF', '\xED', '\x3', '\x2', '\x2', 
		'\x2', '\xEF', '\xEE', '\x3', '\x2', '\x2', '\x2', '\xF0', '\x103', '\x3', 
		'\x2', '\x2', '\x2', '\xF1', '\xF2', '\f', '\r', '\x2', '\x2', '\xF2', 
		'\xF3', '\a', '\x1C', '\x2', '\x2', '\xF3', '\x102', '\x5', '*', '\x16', 
		'\xE', '\xF4', '\xF5', '\f', '\f', '\x2', '\x2', '\xF5', '\xF6', '\a', 
		'\x1A', '\x2', '\x2', '\xF6', '\x102', '\x5', '*', '\x16', '\r', '\xF7', 
		'\xF8', '\f', '\v', '\x2', '\x2', '\xF8', '\xF9', '\a', '\x1B', '\x2', 
		'\x2', '\xF9', '\x102', '\x5', '*', '\x16', '\f', '\xFA', '\xFB', '\f', 
		'\n', '\x2', '\x2', '\xFB', '\xFC', '\t', '\x3', '\x2', '\x2', '\xFC', 
		'\x102', '\x5', '*', '\x16', '\v', '\xFD', '\xFE', '\f', '\x11', '\x2', 
		'\x2', '\xFE', '\x102', '\a', '\x5', '\x2', '\x2', '\xFF', '\x100', '\f', 
		'\x10', '\x2', '\x2', '\x100', '\x102', '\a', '\x6', '\x2', '\x2', '\x101', 
		'\xF1', '\x3', '\x2', '\x2', '\x2', '\x101', '\xF4', '\x3', '\x2', '\x2', 
		'\x2', '\x101', '\xF7', '\x3', '\x2', '\x2', '\x2', '\x101', '\xFA', '\x3', 
		'\x2', '\x2', '\x2', '\x101', '\xFD', '\x3', '\x2', '\x2', '\x2', '\x101', 
		'\xFF', '\x3', '\x2', '\x2', '\x2', '\x102', '\x105', '\x3', '\x2', '\x2', 
		'\x2', '\x103', '\x101', '\x3', '\x2', '\x2', '\x2', '\x103', '\x104', 
		'\x3', '\x2', '\x2', '\x2', '\x104', '+', '\x3', '\x2', '\x2', '\x2', 
		'\x105', '\x103', '\x3', '\x2', '\x2', '\x2', '\x106', '\x10B', '\x5', 
		'*', '\x16', '\x2', '\x107', '\x108', '\a', '\x19', '\x2', '\x2', '\x108', 
		'\x10A', '\x5', '*', '\x16', '\x2', '\x109', '\x107', '\x3', '\x2', '\x2', 
		'\x2', '\x10A', '\x10D', '\x3', '\x2', '\x2', '\x2', '\x10B', '\x109', 
		'\x3', '\x2', '\x2', '\x2', '\x10B', '\x10C', '\x3', '\x2', '\x2', '\x2', 
		'\x10C', '-', '\x3', '\x2', '\x2', '\x2', '\x10D', '\x10B', '\x3', '\x2', 
		'\x2', '\x2', '\x1C', '\x30', '\x32', ':', '\x42', '\x46', 'N', 'R', 'X', 
		'\\', 'j', 'o', 'y', '\x82', '\x87', '\x8D', '\x94', '\x9D', '\xB0', '\xC0', 
		'\xD2', '\xE5', '\xEA', '\xEF', '\x101', '\x103', '\x10B',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
