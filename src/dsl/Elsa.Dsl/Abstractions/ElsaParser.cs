//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Projects/Elsa/experimental/src/dsl/Elsa.Dsl/Dsl\ElsaParser.g4 by ANTLR 4.9.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.1")]
[System.CLSCompliant(false)]
public partial class ElsaParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		EQ=1, GREATER=2, INCREMENT=3, DECREMENT=4, NEW=5, TRIGGER=6, VARIABLE=7, 
		LET=8, IF=9, THEN=10, ELSE=11, FOR=12, RETURN=13, VOID=14, FLOAT=15, INT=16, 
		STRING=17, OBJECT=18, SYMBOL=19, COLON=20, SEMICOLON=21, COMMA=22, PLUS=23, 
		MINUS=24, STAR=25, EQUALS=26, NOT_EQUALS=27, GREATER_EQUALS=28, LESS=29, 
		LESS_EQUALS=30, LAMBDA=31, PARENTHESES_OPEN=32, PARENTHESES_CLOSE=33, 
		BRACKET_OPEN=34, BRACKET_CLOSE=35, CURLYBRACE_OPEN=36, CURLYBRACE_CLOSE=37, 
		EXCLAMATION=38, PIPE=39, PIPE_DBL=40, PERIOD=41, STRING_VAL=42, STRINGTICK_VAL=43, 
		LINE_COMMENT=44, INTEGER_VAL=45, ID=46, WS=47, ESC=48;
	public const int
		RULE_file = 0, RULE_trigger = 1, RULE_object = 2, RULE_newObject = 3, 
		RULE_varDecl = 4, RULE_localVarDecl = 5, RULE_type = 6, RULE_methodCall = 7, 
		RULE_funcCall = 8, RULE_args = 9, RULE_arg = 10, RULE_expr_external = 11, 
		RULE_expr_external_value = 12, RULE_expr_elsa = 13, RULE_block = 14, RULE_objectInitializer = 15, 
		RULE_propertyList = 16, RULE_property = 17, RULE_stat = 18, RULE_thenStat = 19, 
		RULE_elseStat = 20, RULE_expr = 21, RULE_exprList = 22;
	public static readonly string[] ruleNames = {
		"file", "trigger", "object", "newObject", "varDecl", "localVarDecl", "type", 
		"methodCall", "funcCall", "args", "arg", "expr_external", "expr_external_value", 
		"expr_elsa", "block", "objectInitializer", "propertyList", "property", 
		"stat", "thenStat", "elseStat", "expr", "exprList"
	};

	private static readonly string[] _LiteralNames = {
		null, "'='", "'>'", "'++'", "'--'", "'new'", "'trigger'", "'variable'", 
		"'let'", "'if'", "'then'", "'else'", "'for'", "'return'", "'void'", "'float'", 
		"'int'", "'string'", "'object'", null, "':'", "';'", "','", "'+'", "'-'", 
		"'*'", "'=='", "'!='", "'>='", "'<'", "'<='", "'=>'", "'('", "')'", "'['", 
		"']'", "'{'", "'}'", "'!'", "'|'", "'||'", "'.'", null, null, null, null, 
		null, null, "'\\|'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "EQ", "GREATER", "INCREMENT", "DECREMENT", "NEW", "TRIGGER", "VARIABLE", 
		"LET", "IF", "THEN", "ELSE", "FOR", "RETURN", "VOID", "FLOAT", "INT", 
		"STRING", "OBJECT", "SYMBOL", "COLON", "SEMICOLON", "COMMA", "PLUS", "MINUS", 
		"STAR", "EQUALS", "NOT_EQUALS", "GREATER_EQUALS", "LESS", "LESS_EQUALS", 
		"LAMBDA", "PARENTHESES_OPEN", "PARENTHESES_CLOSE", "BRACKET_OPEN", "BRACKET_CLOSE", 
		"CURLYBRACE_OPEN", "CURLYBRACE_CLOSE", "EXCLAMATION", "PIPE", "PIPE_DBL", 
		"PERIOD", "STRING_VAL", "STRINGTICK_VAL", "LINE_COMMENT", "INTEGER_VAL", 
		"ID", "WS", "ESC"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ElsaParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static ElsaParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ElsaParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ElsaParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class FileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatContext[] stat() {
			return GetRuleContexts<StatContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatContext stat(int i) {
			return GetRuleContext<StatContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LINE_COMMENT() { return GetTokens(ElsaParser.LINE_COMMENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINE_COMMENT(int i) {
			return GetToken(ElsaParser.LINE_COMMENT, i);
		}
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 0, RULE_file);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 50;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NEW) | (1L << TRIGGER) | (1L << VARIABLE) | (1L << LET) | (1L << IF) | (1L << FOR) | (1L << RETURN) | (1L << MINUS) | (1L << PARENTHESES_OPEN) | (1L << BRACKET_OPEN) | (1L << CURLYBRACE_OPEN) | (1L << EXCLAMATION) | (1L << STRING_VAL) | (1L << LINE_COMMENT) | (1L << INTEGER_VAL) | (1L << ID))) != 0)) {
				{
				State = 48;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case NEW:
				case TRIGGER:
				case VARIABLE:
				case LET:
				case IF:
				case FOR:
				case RETURN:
				case MINUS:
				case PARENTHESES_OPEN:
				case BRACKET_OPEN:
				case CURLYBRACE_OPEN:
				case EXCLAMATION:
				case STRING_VAL:
				case INTEGER_VAL:
				case ID:
					{
					State = 46;
					stat();
					}
					break;
				case LINE_COMMENT:
					{
					State = 47;
					Match(LINE_COMMENT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 52;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TriggerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGER() { return GetToken(ElsaParser.TRIGGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ObjectContext @object() {
			return GetRuleContext<ObjectContext>(0);
		}
		public TriggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trigger; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterTrigger(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitTrigger(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrigger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TriggerContext trigger() {
		TriggerContext _localctx = new TriggerContext(Context, State);
		EnterRule(_localctx, 2, RULE_trigger);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 53;
			Match(TRIGGER);
			State = 54;
			@object();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(ElsaParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ObjectInitializerContext objectInitializer() {
			return GetRuleContext<ObjectInitializerContext>(0);
		}
		public ObjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterObject(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitObject(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectContext @object() {
		ObjectContext _localctx = new ObjectContext(Context, State);
		EnterRule(_localctx, 4, RULE_object);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 56;
			Match(ID);
			State = 58;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				{
				State = 57;
				objectInitializer();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewObjectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(ElsaParser.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(ElsaParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTHESES_OPEN() { return GetToken(ElsaParser.PARENTHESES_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTHESES_CLOSE() { return GetToken(ElsaParser.PARENTHESES_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(ElsaParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(ElsaParser.GREATER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgsContext args() {
			return GetRuleContext<ArgsContext>(0);
		}
		public NewObjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newObject; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterNewObject(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitNewObject(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewObject(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewObjectContext newObject() {
		NewObjectContext _localctx = new NewObjectContext(Context, State);
		EnterRule(_localctx, 6, RULE_newObject);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 60;
			Match(NEW);
			State = 61;
			Match(ID);
			State = 66;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LESS) {
				{
				State = 62;
				Match(LESS);
				State = 63;
				type();
				State = 64;
				Match(GREATER);
				}
			}

			State = 68;
			Match(PARENTHESES_OPEN);
			State = 70;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				{
				State = 69;
				args();
				}
				break;
			}
			State = 72;
			Match(PARENTHESES_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(ElsaParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(ElsaParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(ElsaParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(ElsaParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public VarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterVarDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitVarDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarDeclContext varDecl() {
		VarDeclContext _localctx = new VarDeclContext(Context, State);
		EnterRule(_localctx, 8, RULE_varDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 74;
			Match(VARIABLE);
			State = 75;
			Match(ID);
			State = 78;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 76;
				Match(COLON);
				State = 77;
				type();
				}
			}

			State = 82;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQ) {
				{
				State = 80;
				Match(EQ);
				State = 81;
				expr(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LET() { return GetToken(ElsaParser.LET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(ElsaParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(ElsaParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(ElsaParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public LocalVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterLocalVarDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitLocalVarDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocalVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocalVarDeclContext localVarDecl() {
		LocalVarDeclContext _localctx = new LocalVarDeclContext(Context, State);
		EnterRule(_localctx, 10, RULE_localVarDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84;
			Match(LET);
			State = 85;
			Match(ID);
			State = 88;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 86;
				Match(COLON);
				State = 87;
				type();
				}
			}

			State = 92;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQ) {
				{
				State = 90;
				Match(EQ);
				State = 91;
				expr(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(ElsaParser.VOID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(ElsaParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(ElsaParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBJECT() { return GetToken(ElsaParser.OBJECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(ElsaParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(ElsaParser.ID, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 12, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 94;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << VOID) | (1L << FLOAT) | (1L << INT) | (1L << STRING) | (1L << OBJECT) | (1L << ID))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(ElsaParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERIOD() { return GetToken(ElsaParser.PERIOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FuncCallContext funcCall() {
			return GetRuleContext<FuncCallContext>(0);
		}
		public MethodCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterMethodCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitMethodCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodCallContext methodCall() {
		MethodCallContext _localctx = new MethodCallContext(Context, State);
		EnterRule(_localctx, 14, RULE_methodCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 96;
			Match(ID);
			State = 97;
			Match(PERIOD);
			State = 98;
			funcCall();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(ElsaParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTHESES_OPEN() { return GetToken(ElsaParser.PARENTHESES_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgsContext args() {
			return GetRuleContext<ArgsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTHESES_CLOSE() { return GetToken(ElsaParser.PARENTHESES_CLOSE, 0); }
		public FuncCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterFuncCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitFuncCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncCallContext funcCall() {
		FuncCallContext _localctx = new FuncCallContext(Context, State);
		EnterRule(_localctx, 16, RULE_funcCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100;
			Match(ID);
			State = 101;
			Match(PARENTHESES_OPEN);
			State = 102;
			args();
			State = 103;
			Match(PARENTHESES_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgContext[] arg() {
			return GetRuleContexts<ArgContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgContext arg(int i) {
			return GetRuleContext<ArgContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElsaParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElsaParser.COMMA, i);
		}
		public ArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_args; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterArgs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitArgs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgsContext args() {
		ArgsContext _localctx = new ArgsContext(Context, State);
		EnterRule(_localctx, 18, RULE_args);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 105;
			arg();
			State = 110;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 106;
				Match(COMMA);
				State = 107;
				arg();
				}
				}
				State = 112;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expr_externalContext expr_external() {
			return GetRuleContext<Expr_externalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expr_elsaContext expr_elsa() {
			return GetRuleContext<Expr_elsaContext>(0);
		}
		public ArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterArg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitArg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgContext arg() {
		ArgContext _localctx = new ArgContext(Context, State);
		EnterRule(_localctx, 20, RULE_arg);
		try {
			State = 116;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 113;
				expr(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 114;
				expr_external();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 115;
				expr_elsa();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr_externalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PIPE() { return GetTokens(ElsaParser.PIPE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PIPE(int i) {
			return GetToken(ElsaParser.PIPE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(ElsaParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_external_valueContext expr_external_value() {
			return GetRuleContext<Expr_external_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PIPE_DBL() { return GetToken(ElsaParser.PIPE_DBL, 0); }
		public Expr_externalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_external; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterExpr_external(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitExpr_external(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_external(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expr_externalContext expr_external() {
		Expr_externalContext _localctx = new Expr_externalContext(Context, State);
		EnterRule(_localctx, 22, RULE_expr_external);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 118;
			Match(PIPE);
			State = 119;
			Match(ID);
			State = 120;
			Match(PIPE);
			State = 121;
			expr_external_value();
			State = 122;
			Match(PIPE_DBL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr_external_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ESC() { return GetTokens(ElsaParser.ESC); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESC(int i) {
			return GetToken(ElsaParser.ESC, i);
		}
		public Expr_external_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_external_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterExpr_external_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitExpr_external_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_external_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expr_external_valueContext expr_external_value() {
		Expr_external_valueContext _localctx = new Expr_external_valueContext(Context, State);
		EnterRule(_localctx, 24, RULE_expr_external_value);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 128;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					State = 126;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
					case 1:
						{
						State = 124;
						Match(ESC);
						}
						break;
					case 2:
						{
						State = 125;
						MatchWildcard();
						}
						break;
					}
					} 
				}
				State = 130;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr_elsaContext : ParserRuleContext {
		public Expr_elsaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_elsa; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterExpr_elsa(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitExpr_elsa(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_elsa(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expr_elsaContext expr_elsa() {
		Expr_elsaContext _localctx = new Expr_elsaContext(Context, State);
		EnterRule(_localctx, 26, RULE_expr_elsa);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 134;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 131;
					MatchWildcard();
					}
					} 
				}
				State = 136;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURLYBRACE_OPEN() { return GetToken(ElsaParser.CURLYBRACE_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURLYBRACE_CLOSE() { return GetToken(ElsaParser.CURLYBRACE_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatContext[] stat() {
			return GetRuleContexts<StatContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatContext stat(int i) {
			return GetRuleContext<StatContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 28, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 137;
			Match(CURLYBRACE_OPEN);
			State = 141;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NEW) | (1L << TRIGGER) | (1L << VARIABLE) | (1L << LET) | (1L << IF) | (1L << FOR) | (1L << RETURN) | (1L << MINUS) | (1L << PARENTHESES_OPEN) | (1L << BRACKET_OPEN) | (1L << CURLYBRACE_OPEN) | (1L << EXCLAMATION) | (1L << STRING_VAL) | (1L << INTEGER_VAL) | (1L << ID))) != 0)) {
				{
				{
				State = 138;
				stat();
				}
				}
				State = 143;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 144;
			Match(CURLYBRACE_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectInitializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURLYBRACE_OPEN() { return GetToken(ElsaParser.CURLYBRACE_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURLYBRACE_CLOSE() { return GetToken(ElsaParser.CURLYBRACE_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PropertyListContext propertyList() {
			return GetRuleContext<PropertyListContext>(0);
		}
		public ObjectInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectInitializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterObjectInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitObjectInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectInitializerContext objectInitializer() {
		ObjectInitializerContext _localctx = new ObjectInitializerContext(Context, State);
		EnterRule(_localctx, 30, RULE_objectInitializer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 146;
			Match(CURLYBRACE_OPEN);
			State = 148;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ID) {
				{
				State = 147;
				propertyList();
				}
			}

			State = 150;
			Match(CURLYBRACE_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext[] property() {
			return GetRuleContexts<PropertyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext property(int i) {
			return GetRuleContext<PropertyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElsaParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElsaParser.COMMA, i);
		}
		public PropertyListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterPropertyList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitPropertyList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyListContext propertyList() {
		PropertyListContext _localctx = new PropertyListContext(Context, State);
		EnterRule(_localctx, 32, RULE_propertyList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 152;
			property();
			State = 157;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 153;
				Match(COMMA);
				State = 154;
				property();
				}
				}
				State = 159;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(ElsaParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(ElsaParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public PropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterProperty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitProperty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyContext property() {
		PropertyContext _localctx = new PropertyContext(Context, State);
		EnterRule(_localctx, 34, RULE_property);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 160;
			Match(ID);
			State = 161;
			Match(COLON);
			State = 162;
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatContext : ParserRuleContext {
		public StatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat; } }
	 
		public StatContext() { }
		public virtual void CopyFrom(StatContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IfStatContext : StatContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(ElsaParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(ElsaParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ThenStatContext thenStat() {
			return GetRuleContext<ThenStatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(ElsaParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ElseStatContext elseStat() {
			return GetRuleContext<ElseStatContext>(0);
		}
		public IfStatContext(StatContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterIfStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitIfStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BlockStatContext : StatContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public BlockStatContext(StatContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterBlockStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitBlockStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionStatContext : StatContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(ElsaParser.SEMICOLON, 0); }
		public ExpressionStatContext(StatContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterExpressionStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitExpressionStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TriggerStatContext : StatContext {
		[System.Diagnostics.DebuggerNonUserCode] public TriggerContext trigger() {
			return GetRuleContext<TriggerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(ElsaParser.SEMICOLON, 0); }
		public TriggerStatContext(StatContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterTriggerStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitTriggerStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTriggerStat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ObjectStatContext : StatContext {
		[System.Diagnostics.DebuggerNonUserCode] public ObjectContext @object() {
			return GetRuleContext<ObjectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(ElsaParser.SEMICOLON, 0); }
		public ObjectStatContext(StatContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterObjectStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitObjectStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectStat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReturnStatContext : StatContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(ElsaParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(ElsaParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ReturnStatContext(StatContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterReturnStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitReturnStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableDeclarationStatContext : StatContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext varDecl() {
			return GetRuleContext<VarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(ElsaParser.SEMICOLON, 0); }
		public VariableDeclarationStatContext(StatContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclarationStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclarationStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarationStat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignmentStatContext : StatContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(ElsaParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(ElsaParser.SEMICOLON, 0); }
		public AssignmentStatContext(StatContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterAssignmentStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitAssignmentStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentStat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LocalVariableDeclarationStatContext : StatContext {
		[System.Diagnostics.DebuggerNonUserCode] public LocalVarDeclContext localVarDecl() {
			return GetRuleContext<LocalVarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(ElsaParser.SEMICOLON, 0); }
		public LocalVariableDeclarationStatContext(StatContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterLocalVariableDeclarationStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitLocalVariableDeclarationStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocalVariableDeclarationStat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForStatContext : StatContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(ElsaParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTHESES_OPEN() { return GetToken(ElsaParser.PARENTHESES_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(ElsaParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(ElsaParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(ElsaParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(ElsaParser.SEMICOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTHESES_CLOSE() { return GetToken(ElsaParser.PARENTHESES_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatContext stat() {
			return GetRuleContext<StatContext>(0);
		}
		public ForStatContext(StatContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterForStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitForStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatContext stat() {
		StatContext _localctx = new StatContext(Context, State);
		EnterRule(_localctx, 36, RULE_stat);
		int _la;
		try {
			State = 210;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				_localctx = new TriggerStatContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 164;
				trigger();
				State = 165;
				Match(SEMICOLON);
				}
				break;
			case 2:
				_localctx = new ObjectStatContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 167;
				@object();
				State = 168;
				Match(SEMICOLON);
				}
				break;
			case 3:
				_localctx = new IfStatContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 170;
				Match(IF);
				State = 171;
				expr(0);
				State = 172;
				Match(THEN);
				State = 173;
				thenStat();
				State = 176;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
				case 1:
					{
					State = 174;
					Match(ELSE);
					State = 175;
					elseStat();
					}
					break;
				}
				}
				break;
			case 4:
				_localctx = new ForStatContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 178;
				Match(FOR);
				State = 179;
				Match(PARENTHESES_OPEN);
				State = 180;
				Match(ID);
				State = 181;
				Match(EQ);
				State = 182;
				expr(0);
				State = 183;
				Match(SEMICOLON);
				State = 184;
				expr(0);
				State = 185;
				Match(SEMICOLON);
				State = 186;
				expr(0);
				State = 187;
				Match(PARENTHESES_CLOSE);
				State = 188;
				stat();
				}
				break;
			case 5:
				_localctx = new ReturnStatContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 190;
				Match(RETURN);
				State = 192;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NEW) | (1L << MINUS) | (1L << PARENTHESES_OPEN) | (1L << BRACKET_OPEN) | (1L << EXCLAMATION) | (1L << STRING_VAL) | (1L << INTEGER_VAL) | (1L << ID))) != 0)) {
					{
					State = 191;
					expr(0);
					}
				}

				State = 194;
				Match(SEMICOLON);
				}
				break;
			case 6:
				_localctx = new BlockStatContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 195;
				block();
				}
				break;
			case 7:
				_localctx = new VariableDeclarationStatContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 196;
				varDecl();
				State = 197;
				Match(SEMICOLON);
				}
				break;
			case 8:
				_localctx = new LocalVariableDeclarationStatContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 199;
				localVarDecl();
				State = 200;
				Match(SEMICOLON);
				}
				break;
			case 9:
				_localctx = new AssignmentStatContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 202;
				expr(0);
				State = 203;
				Match(EQ);
				State = 204;
				expr(0);
				State = 205;
				Match(SEMICOLON);
				}
				break;
			case 10:
				_localctx = new ExpressionStatContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 207;
				expr(0);
				State = 208;
				Match(SEMICOLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThenStatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatContext stat() {
			return GetRuleContext<StatContext>(0);
		}
		public ThenStatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_thenStat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterThenStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitThenStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThenStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ThenStatContext thenStat() {
		ThenStatContext _localctx = new ThenStatContext(Context, State);
		EnterRule(_localctx, 38, RULE_thenStat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 212;
			stat();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseStatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatContext stat() {
			return GetRuleContext<StatContext>(0);
		}
		public ElseStatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseStat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterElseStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitElseStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseStatContext elseStat() {
		ElseStatContext _localctx = new ElseStatContext(Context, State);
		EnterRule(_localctx, 40, RULE_elseStat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 214;
			stat();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NewObjectExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public NewObjectContext newObject() {
			return GetRuleContext<NewObjectContext>(0);
		}
		public NewObjectExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterNewObjectExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitNewObjectExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewObjectExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubtractExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(ElsaParser.MINUS, 0); }
		public SubtractExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterSubtractExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitSubtractExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubtractExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IncrementExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCREMENT() { return GetToken(ElsaParser.INCREMENT, 0); }
		public IncrementExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterIncrementExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitIncrementExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIncrementExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ObjectExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ObjectContext @object() {
			return GetRuleContext<ObjectContext>(0);
		}
		public ObjectExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterObjectExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitObjectExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringValueExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_VAL() { return GetToken(ElsaParser.STRING_VAL, 0); }
		public StringValueExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterStringValueExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitStringValueExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringValueExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplyExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(ElsaParser.STAR, 0); }
		public MultiplyExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterMultiplyExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitMultiplyExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplyExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesesExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTHESES_OPEN() { return GetToken(ElsaParser.PARENTHESES_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTHESES_CLOSE() { return GetToken(ElsaParser.PARENTHESES_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprListContext exprList() {
			return GetRuleContext<ExprListContext>(0);
		}
		public ParenthesesExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterParenthesesExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitParenthesesExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesesExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public FuncCallContext funcCall() {
			return GetRuleContext<FuncCallContext>(0);
		}
		public FunctionExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterFunctionExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitFunctionExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DecrementExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECREMENT() { return GetToken(ElsaParser.DECREMENT, 0); }
		public DecrementExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterDecrementExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitDecrementExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecrementExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NegateExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(ElsaParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public NegateExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterNegateExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitNegateExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegateExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MethodCallExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public MethodCallContext methodCall() {
			return GetRuleContext<MethodCallContext>(0);
		}
		public MethodCallExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterMethodCallExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitMethodCallExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodCallExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(ElsaParser.ID, 0); }
		public VariableExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterVariableExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitVariableExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLAMATION() { return GetToken(ElsaParser.EXCLAMATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public NotExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterNotExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitNotExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntegerValueExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_VAL() { return GetToken(ElsaParser.INTEGER_VAL, 0); }
		public IntegerValueExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterIntegerValueExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitIntegerValueExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegerValueExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(ElsaParser.PLUS, 0); }
		public AddExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterAddExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitAddExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BracketsExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BRACKET_OPEN() { return GetToken(ElsaParser.BRACKET_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BRACKET_CLOSE() { return GetToken(ElsaParser.BRACKET_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprListContext exprList() {
			return GetRuleContext<ExprListContext>(0);
		}
		public BracketsExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterBracketsExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitBracketsExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBracketsExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CompareExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(ElsaParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(ElsaParser.GREATER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(ElsaParser.LESS, 0); }
		public CompareExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterCompareExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitCompareExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompareExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 42;
		EnterRecursionRule(_localctx, 42, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 238;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				{
				_localctx = new FunctionExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 217;
				funcCall();
				}
				break;
			case 2:
				{
				_localctx = new ObjectExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 218;
				@object();
				}
				break;
			case 3:
				{
				_localctx = new NewObjectExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 219;
				newObject();
				}
				break;
			case 4:
				{
				_localctx = new NegateExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 220;
				Match(MINUS);
				State = 221;
				expr(12);
				}
				break;
			case 5:
				{
				_localctx = new NotExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 222;
				Match(EXCLAMATION);
				State = 223;
				expr(11);
				}
				break;
			case 6:
				{
				_localctx = new IntegerValueExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 224;
				Match(INTEGER_VAL);
				}
				break;
			case 7:
				{
				_localctx = new StringValueExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 225;
				Match(STRING_VAL);
				}
				break;
			case 8:
				{
				_localctx = new ParenthesesExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 226;
				Match(PARENTHESES_OPEN);
				State = 228;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NEW) | (1L << MINUS) | (1L << PARENTHESES_OPEN) | (1L << BRACKET_OPEN) | (1L << EXCLAMATION) | (1L << STRING_VAL) | (1L << INTEGER_VAL) | (1L << ID))) != 0)) {
					{
					State = 227;
					exprList();
					}
				}

				State = 230;
				Match(PARENTHESES_CLOSE);
				}
				break;
			case 9:
				{
				_localctx = new BracketsExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 231;
				Match(BRACKET_OPEN);
				State = 233;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NEW) | (1L << MINUS) | (1L << PARENTHESES_OPEN) | (1L << BRACKET_OPEN) | (1L << EXCLAMATION) | (1L << STRING_VAL) | (1L << INTEGER_VAL) | (1L << ID))) != 0)) {
					{
					State = 232;
					exprList();
					}
				}

				State = 235;
				Match(BRACKET_CLOSE);
				}
				break;
			case 10:
				{
				_localctx = new MethodCallExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 236;
				methodCall();
				}
				break;
			case 11:
				{
				_localctx = new VariableExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 237;
				Match(ID);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 258;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 256;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
					case 1:
						{
						_localctx = new MultiplyExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 240;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 241;
						Match(STAR);
						State = 242;
						expr(11);
						}
						break;
					case 2:
						{
						_localctx = new AddExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 243;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 244;
						Match(PLUS);
						State = 245;
						expr(10);
						}
						break;
					case 3:
						{
						_localctx = new SubtractExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 246;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 247;
						Match(MINUS);
						State = 248;
						expr(9);
						}
						break;
					case 4:
						{
						_localctx = new CompareExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 249;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 250;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GREATER) | (1L << EQUALS) | (1L << LESS))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 251;
						expr(8);
						}
						break;
					case 5:
						{
						_localctx = new IncrementExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 252;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 253;
						Match(INCREMENT);
						}
						break;
					case 6:
						{
						_localctx = new DecrementExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 254;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 255;
						Match(DECREMENT);
						}
						break;
					}
					} 
				}
				State = 260;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExprListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ElsaParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ElsaParser.COMMA, i);
		}
		public ExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.EnterExprList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IElsaParserListener typedListener = listener as IElsaParserListener;
			if (typedListener != null) typedListener.ExitExprList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IElsaParserVisitor<TResult> typedVisitor = visitor as IElsaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprListContext exprList() {
		ExprListContext _localctx = new ExprListContext(Context, State);
		EnterRule(_localctx, 44, RULE_exprList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 261;
			expr(0);
			State = 266;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 262;
				Match(COMMA);
				State = 263;
				expr(0);
				}
				}
				State = 268;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 21: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 10);
		case 1: return Precpred(Context, 9);
		case 2: return Precpred(Context, 8);
		case 3: return Precpred(Context, 7);
		case 4: return Precpred(Context, 14);
		case 5: return Precpred(Context, 13);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x32', '\x110', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x3', '\x2', '\x3', '\x2', '\a', '\x2', '\x33', '\n', '\x2', 
		'\f', '\x2', '\xE', '\x2', '\x36', '\v', '\x2', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '=', '\n', '\x4', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x5', '\x5', '\x45', '\n', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x5', '\x5', 'I', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', 'Q', '\n', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', 'U', '\n', '\x6', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '[', '\n', '\a', 
		'\x3', '\a', '\x3', '\a', '\x5', '\a', '_', '\n', '\a', '\x3', '\b', '\x3', 
		'\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\a', '\v', 'o', '\n', '\v', '\f', '\v', '\xE', '\v', 
		'r', '\v', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', 'w', 
		'\n', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\a', '\xE', '\x81', '\n', 
		'\xE', '\f', '\xE', '\xE', '\xE', '\x84', '\v', '\xE', '\x3', '\xF', '\a', 
		'\xF', '\x87', '\n', '\xF', '\f', '\xF', '\xE', '\xF', '\x8A', '\v', '\xF', 
		'\x3', '\x10', '\x3', '\x10', '\a', '\x10', '\x8E', '\n', '\x10', '\f', 
		'\x10', '\xE', '\x10', '\x91', '\v', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\x97', '\n', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\a', 
		'\x12', '\x9E', '\n', '\x12', '\f', '\x12', '\xE', '\x12', '\xA1', '\v', 
		'\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x5', '\x14', '\xB3', '\n', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x5', '\x14', '\xC3', '\n', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x5', '\x14', '\xD5', '\n', '\x14', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x17', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x5', '\x17', '\xE7', '\n', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x5', '\x17', '\xEC', '\n', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x3', '\x17', '\x5', '\x17', '\xF1', '\n', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\a', 
		'\x17', '\x103', '\n', '\x17', '\f', '\x17', '\xE', '\x17', '\x106', '\v', 
		'\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\a', '\x18', '\x10B', 
		'\n', '\x18', '\f', '\x18', '\xE', '\x18', '\x10E', '\v', '\x18', '\x3', 
		'\x18', '\x4', '\x82', '\x88', '\x3', ',', '\x19', '\x2', '\x4', '\x6', 
		'\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', 
		'\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', '\x2', '\x4', 
		'\x4', '\x2', '\x10', '\x14', '\x30', '\x30', '\x5', '\x2', '\x4', '\x4', 
		'\x1C', '\x1C', '\x1F', '\x1F', '\x2', '\x128', '\x2', '\x34', '\x3', 
		'\x2', '\x2', '\x2', '\x4', '\x37', '\x3', '\x2', '\x2', '\x2', '\x6', 
		':', '\x3', '\x2', '\x2', '\x2', '\b', '>', '\x3', '\x2', '\x2', '\x2', 
		'\n', 'L', '\x3', '\x2', '\x2', '\x2', '\f', 'V', '\x3', '\x2', '\x2', 
		'\x2', '\xE', '`', '\x3', '\x2', '\x2', '\x2', '\x10', '\x62', '\x3', 
		'\x2', '\x2', '\x2', '\x12', '\x66', '\x3', '\x2', '\x2', '\x2', '\x14', 
		'k', '\x3', '\x2', '\x2', '\x2', '\x16', 'v', '\x3', '\x2', '\x2', '\x2', 
		'\x18', 'x', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x82', '\x3', '\x2', 
		'\x2', '\x2', '\x1C', '\x88', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x8B', 
		'\x3', '\x2', '\x2', '\x2', ' ', '\x94', '\x3', '\x2', '\x2', '\x2', '\"', 
		'\x9A', '\x3', '\x2', '\x2', '\x2', '$', '\xA2', '\x3', '\x2', '\x2', 
		'\x2', '&', '\xD4', '\x3', '\x2', '\x2', '\x2', '(', '\xD6', '\x3', '\x2', 
		'\x2', '\x2', '*', '\xD8', '\x3', '\x2', '\x2', '\x2', ',', '\xF0', '\x3', 
		'\x2', '\x2', '\x2', '.', '\x107', '\x3', '\x2', '\x2', '\x2', '\x30', 
		'\x33', '\x5', '&', '\x14', '\x2', '\x31', '\x33', '\a', '.', '\x2', '\x2', 
		'\x32', '\x30', '\x3', '\x2', '\x2', '\x2', '\x32', '\x31', '\x3', '\x2', 
		'\x2', '\x2', '\x33', '\x36', '\x3', '\x2', '\x2', '\x2', '\x34', '\x32', 
		'\x3', '\x2', '\x2', '\x2', '\x34', '\x35', '\x3', '\x2', '\x2', '\x2', 
		'\x35', '\x3', '\x3', '\x2', '\x2', '\x2', '\x36', '\x34', '\x3', '\x2', 
		'\x2', '\x2', '\x37', '\x38', '\a', '\b', '\x2', '\x2', '\x38', '\x39', 
		'\x5', '\x6', '\x4', '\x2', '\x39', '\x5', '\x3', '\x2', '\x2', '\x2', 
		':', '<', '\a', '\x30', '\x2', '\x2', ';', '=', '\x5', ' ', '\x11', '\x2', 
		'<', ';', '\x3', '\x2', '\x2', '\x2', '<', '=', '\x3', '\x2', '\x2', '\x2', 
		'=', '\a', '\x3', '\x2', '\x2', '\x2', '>', '?', '\a', '\a', '\x2', '\x2', 
		'?', '\x44', '\a', '\x30', '\x2', '\x2', '@', '\x41', '\a', '\x1F', '\x2', 
		'\x2', '\x41', '\x42', '\x5', '\xE', '\b', '\x2', '\x42', '\x43', '\a', 
		'\x4', '\x2', '\x2', '\x43', '\x45', '\x3', '\x2', '\x2', '\x2', '\x44', 
		'@', '\x3', '\x2', '\x2', '\x2', '\x44', '\x45', '\x3', '\x2', '\x2', 
		'\x2', '\x45', '\x46', '\x3', '\x2', '\x2', '\x2', '\x46', 'H', '\a', 
		'\"', '\x2', '\x2', 'G', 'I', '\x5', '\x14', '\v', '\x2', 'H', 'G', '\x3', 
		'\x2', '\x2', '\x2', 'H', 'I', '\x3', '\x2', '\x2', '\x2', 'I', 'J', '\x3', 
		'\x2', '\x2', '\x2', 'J', 'K', '\a', '#', '\x2', '\x2', 'K', '\t', '\x3', 
		'\x2', '\x2', '\x2', 'L', 'M', '\a', '\t', '\x2', '\x2', 'M', 'P', '\a', 
		'\x30', '\x2', '\x2', 'N', 'O', '\a', '\x16', '\x2', '\x2', 'O', 'Q', 
		'\x5', '\xE', '\b', '\x2', 'P', 'N', '\x3', '\x2', '\x2', '\x2', 'P', 
		'Q', '\x3', '\x2', '\x2', '\x2', 'Q', 'T', '\x3', '\x2', '\x2', '\x2', 
		'R', 'S', '\a', '\x3', '\x2', '\x2', 'S', 'U', '\x5', ',', '\x17', '\x2', 
		'T', 'R', '\x3', '\x2', '\x2', '\x2', 'T', 'U', '\x3', '\x2', '\x2', '\x2', 
		'U', '\v', '\x3', '\x2', '\x2', '\x2', 'V', 'W', '\a', '\n', '\x2', '\x2', 
		'W', 'Z', '\a', '\x30', '\x2', '\x2', 'X', 'Y', '\a', '\x16', '\x2', '\x2', 
		'Y', '[', '\x5', '\xE', '\b', '\x2', 'Z', 'X', '\x3', '\x2', '\x2', '\x2', 
		'Z', '[', '\x3', '\x2', '\x2', '\x2', '[', '^', '\x3', '\x2', '\x2', '\x2', 
		'\\', ']', '\a', '\x3', '\x2', '\x2', ']', '_', '\x5', ',', '\x17', '\x2', 
		'^', '\\', '\x3', '\x2', '\x2', '\x2', '^', '_', '\x3', '\x2', '\x2', 
		'\x2', '_', '\r', '\x3', '\x2', '\x2', '\x2', '`', '\x61', '\t', '\x2', 
		'\x2', '\x2', '\x61', '\xF', '\x3', '\x2', '\x2', '\x2', '\x62', '\x63', 
		'\a', '\x30', '\x2', '\x2', '\x63', '\x64', '\a', '+', '\x2', '\x2', '\x64', 
		'\x65', '\x5', '\x12', '\n', '\x2', '\x65', '\x11', '\x3', '\x2', '\x2', 
		'\x2', '\x66', 'g', '\a', '\x30', '\x2', '\x2', 'g', 'h', '\a', '\"', 
		'\x2', '\x2', 'h', 'i', '\x5', '\x14', '\v', '\x2', 'i', 'j', '\a', '#', 
		'\x2', '\x2', 'j', '\x13', '\x3', '\x2', '\x2', '\x2', 'k', 'p', '\x5', 
		'\x16', '\f', '\x2', 'l', 'm', '\a', '\x18', '\x2', '\x2', 'm', 'o', '\x5', 
		'\x16', '\f', '\x2', 'n', 'l', '\x3', '\x2', '\x2', '\x2', 'o', 'r', '\x3', 
		'\x2', '\x2', '\x2', 'p', 'n', '\x3', '\x2', '\x2', '\x2', 'p', 'q', '\x3', 
		'\x2', '\x2', '\x2', 'q', '\x15', '\x3', '\x2', '\x2', '\x2', 'r', 'p', 
		'\x3', '\x2', '\x2', '\x2', 's', 'w', '\x5', ',', '\x17', '\x2', 't', 
		'w', '\x5', '\x18', '\r', '\x2', 'u', 'w', '\x5', '\x1C', '\xF', '\x2', 
		'v', 's', '\x3', '\x2', '\x2', '\x2', 'v', 't', '\x3', '\x2', '\x2', '\x2', 
		'v', 'u', '\x3', '\x2', '\x2', '\x2', 'w', '\x17', '\x3', '\x2', '\x2', 
		'\x2', 'x', 'y', '\a', ')', '\x2', '\x2', 'y', 'z', '\a', '\x30', '\x2', 
		'\x2', 'z', '{', '\a', ')', '\x2', '\x2', '{', '|', '\x5', '\x1A', '\xE', 
		'\x2', '|', '}', '\a', '*', '\x2', '\x2', '}', '\x19', '\x3', '\x2', '\x2', 
		'\x2', '~', '\x81', '\a', '\x32', '\x2', '\x2', '\x7F', '\x81', '\v', 
		'\x2', '\x2', '\x2', '\x80', '~', '\x3', '\x2', '\x2', '\x2', '\x80', 
		'\x7F', '\x3', '\x2', '\x2', '\x2', '\x81', '\x84', '\x3', '\x2', '\x2', 
		'\x2', '\x82', '\x83', '\x3', '\x2', '\x2', '\x2', '\x82', '\x80', '\x3', 
		'\x2', '\x2', '\x2', '\x83', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x84', 
		'\x82', '\x3', '\x2', '\x2', '\x2', '\x85', '\x87', '\v', '\x2', '\x2', 
		'\x2', '\x86', '\x85', '\x3', '\x2', '\x2', '\x2', '\x87', '\x8A', '\x3', 
		'\x2', '\x2', '\x2', '\x88', '\x89', '\x3', '\x2', '\x2', '\x2', '\x88', 
		'\x86', '\x3', '\x2', '\x2', '\x2', '\x89', '\x1D', '\x3', '\x2', '\x2', 
		'\x2', '\x8A', '\x88', '\x3', '\x2', '\x2', '\x2', '\x8B', '\x8F', '\a', 
		'&', '\x2', '\x2', '\x8C', '\x8E', '\x5', '&', '\x14', '\x2', '\x8D', 
		'\x8C', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x91', '\x3', '\x2', '\x2', 
		'\x2', '\x8F', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x90', '\x3', 
		'\x2', '\x2', '\x2', '\x90', '\x92', '\x3', '\x2', '\x2', '\x2', '\x91', 
		'\x8F', '\x3', '\x2', '\x2', '\x2', '\x92', '\x93', '\a', '\'', '\x2', 
		'\x2', '\x93', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x94', '\x96', '\a', 
		'&', '\x2', '\x2', '\x95', '\x97', '\x5', '\"', '\x12', '\x2', '\x96', 
		'\x95', '\x3', '\x2', '\x2', '\x2', '\x96', '\x97', '\x3', '\x2', '\x2', 
		'\x2', '\x97', '\x98', '\x3', '\x2', '\x2', '\x2', '\x98', '\x99', '\a', 
		'\'', '\x2', '\x2', '\x99', '!', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x9F', 
		'\x5', '$', '\x13', '\x2', '\x9B', '\x9C', '\a', '\x18', '\x2', '\x2', 
		'\x9C', '\x9E', '\x5', '$', '\x13', '\x2', '\x9D', '\x9B', '\x3', '\x2', 
		'\x2', '\x2', '\x9E', '\xA1', '\x3', '\x2', '\x2', '\x2', '\x9F', '\x9D', 
		'\x3', '\x2', '\x2', '\x2', '\x9F', '\xA0', '\x3', '\x2', '\x2', '\x2', 
		'\xA0', '#', '\x3', '\x2', '\x2', '\x2', '\xA1', '\x9F', '\x3', '\x2', 
		'\x2', '\x2', '\xA2', '\xA3', '\a', '\x30', '\x2', '\x2', '\xA3', '\xA4', 
		'\a', '\x16', '\x2', '\x2', '\xA4', '\xA5', '\x5', ',', '\x17', '\x2', 
		'\xA5', '%', '\x3', '\x2', '\x2', '\x2', '\xA6', '\xA7', '\x5', '\x4', 
		'\x3', '\x2', '\xA7', '\xA8', '\a', '\x17', '\x2', '\x2', '\xA8', '\xD5', 
		'\x3', '\x2', '\x2', '\x2', '\xA9', '\xAA', '\x5', '\x6', '\x4', '\x2', 
		'\xAA', '\xAB', '\a', '\x17', '\x2', '\x2', '\xAB', '\xD5', '\x3', '\x2', 
		'\x2', '\x2', '\xAC', '\xAD', '\a', '\v', '\x2', '\x2', '\xAD', '\xAE', 
		'\x5', ',', '\x17', '\x2', '\xAE', '\xAF', '\a', '\f', '\x2', '\x2', '\xAF', 
		'\xB2', '\x5', '(', '\x15', '\x2', '\xB0', '\xB1', '\a', '\r', '\x2', 
		'\x2', '\xB1', '\xB3', '\x5', '*', '\x16', '\x2', '\xB2', '\xB0', '\x3', 
		'\x2', '\x2', '\x2', '\xB2', '\xB3', '\x3', '\x2', '\x2', '\x2', '\xB3', 
		'\xD5', '\x3', '\x2', '\x2', '\x2', '\xB4', '\xB5', '\a', '\xE', '\x2', 
		'\x2', '\xB5', '\xB6', '\a', '\"', '\x2', '\x2', '\xB6', '\xB7', '\a', 
		'\x30', '\x2', '\x2', '\xB7', '\xB8', '\a', '\x3', '\x2', '\x2', '\xB8', 
		'\xB9', '\x5', ',', '\x17', '\x2', '\xB9', '\xBA', '\a', '\x17', '\x2', 
		'\x2', '\xBA', '\xBB', '\x5', ',', '\x17', '\x2', '\xBB', '\xBC', '\a', 
		'\x17', '\x2', '\x2', '\xBC', '\xBD', '\x5', ',', '\x17', '\x2', '\xBD', 
		'\xBE', '\a', '#', '\x2', '\x2', '\xBE', '\xBF', '\x5', '&', '\x14', '\x2', 
		'\xBF', '\xD5', '\x3', '\x2', '\x2', '\x2', '\xC0', '\xC2', '\a', '\xF', 
		'\x2', '\x2', '\xC1', '\xC3', '\x5', ',', '\x17', '\x2', '\xC2', '\xC1', 
		'\x3', '\x2', '\x2', '\x2', '\xC2', '\xC3', '\x3', '\x2', '\x2', '\x2', 
		'\xC3', '\xC4', '\x3', '\x2', '\x2', '\x2', '\xC4', '\xD5', '\a', '\x17', 
		'\x2', '\x2', '\xC5', '\xD5', '\x5', '\x1E', '\x10', '\x2', '\xC6', '\xC7', 
		'\x5', '\n', '\x6', '\x2', '\xC7', '\xC8', '\a', '\x17', '\x2', '\x2', 
		'\xC8', '\xD5', '\x3', '\x2', '\x2', '\x2', '\xC9', '\xCA', '\x5', '\f', 
		'\a', '\x2', '\xCA', '\xCB', '\a', '\x17', '\x2', '\x2', '\xCB', '\xD5', 
		'\x3', '\x2', '\x2', '\x2', '\xCC', '\xCD', '\x5', ',', '\x17', '\x2', 
		'\xCD', '\xCE', '\a', '\x3', '\x2', '\x2', '\xCE', '\xCF', '\x5', ',', 
		'\x17', '\x2', '\xCF', '\xD0', '\a', '\x17', '\x2', '\x2', '\xD0', '\xD5', 
		'\x3', '\x2', '\x2', '\x2', '\xD1', '\xD2', '\x5', ',', '\x17', '\x2', 
		'\xD2', '\xD3', '\a', '\x17', '\x2', '\x2', '\xD3', '\xD5', '\x3', '\x2', 
		'\x2', '\x2', '\xD4', '\xA6', '\x3', '\x2', '\x2', '\x2', '\xD4', '\xA9', 
		'\x3', '\x2', '\x2', '\x2', '\xD4', '\xAC', '\x3', '\x2', '\x2', '\x2', 
		'\xD4', '\xB4', '\x3', '\x2', '\x2', '\x2', '\xD4', '\xC0', '\x3', '\x2', 
		'\x2', '\x2', '\xD4', '\xC5', '\x3', '\x2', '\x2', '\x2', '\xD4', '\xC6', 
		'\x3', '\x2', '\x2', '\x2', '\xD4', '\xC9', '\x3', '\x2', '\x2', '\x2', 
		'\xD4', '\xCC', '\x3', '\x2', '\x2', '\x2', '\xD4', '\xD1', '\x3', '\x2', 
		'\x2', '\x2', '\xD5', '\'', '\x3', '\x2', '\x2', '\x2', '\xD6', '\xD7', 
		'\x5', '&', '\x14', '\x2', '\xD7', ')', '\x3', '\x2', '\x2', '\x2', '\xD8', 
		'\xD9', '\x5', '&', '\x14', '\x2', '\xD9', '+', '\x3', '\x2', '\x2', '\x2', 
		'\xDA', '\xDB', '\b', '\x17', '\x1', '\x2', '\xDB', '\xF1', '\x5', '\x12', 
		'\n', '\x2', '\xDC', '\xF1', '\x5', '\x6', '\x4', '\x2', '\xDD', '\xF1', 
		'\x5', '\b', '\x5', '\x2', '\xDE', '\xDF', '\a', '\x1A', '\x2', '\x2', 
		'\xDF', '\xF1', '\x5', ',', '\x17', '\xE', '\xE0', '\xE1', '\a', '(', 
		'\x2', '\x2', '\xE1', '\xF1', '\x5', ',', '\x17', '\r', '\xE2', '\xF1', 
		'\a', '/', '\x2', '\x2', '\xE3', '\xF1', '\a', ',', '\x2', '\x2', '\xE4', 
		'\xE6', '\a', '\"', '\x2', '\x2', '\xE5', '\xE7', '\x5', '.', '\x18', 
		'\x2', '\xE6', '\xE5', '\x3', '\x2', '\x2', '\x2', '\xE6', '\xE7', '\x3', 
		'\x2', '\x2', '\x2', '\xE7', '\xE8', '\x3', '\x2', '\x2', '\x2', '\xE8', 
		'\xF1', '\a', '#', '\x2', '\x2', '\xE9', '\xEB', '\a', '$', '\x2', '\x2', 
		'\xEA', '\xEC', '\x5', '.', '\x18', '\x2', '\xEB', '\xEA', '\x3', '\x2', 
		'\x2', '\x2', '\xEB', '\xEC', '\x3', '\x2', '\x2', '\x2', '\xEC', '\xED', 
		'\x3', '\x2', '\x2', '\x2', '\xED', '\xF1', '\a', '%', '\x2', '\x2', '\xEE', 
		'\xF1', '\x5', '\x10', '\t', '\x2', '\xEF', '\xF1', '\a', '\x30', '\x2', 
		'\x2', '\xF0', '\xDA', '\x3', '\x2', '\x2', '\x2', '\xF0', '\xDC', '\x3', 
		'\x2', '\x2', '\x2', '\xF0', '\xDD', '\x3', '\x2', '\x2', '\x2', '\xF0', 
		'\xDE', '\x3', '\x2', '\x2', '\x2', '\xF0', '\xE0', '\x3', '\x2', '\x2', 
		'\x2', '\xF0', '\xE2', '\x3', '\x2', '\x2', '\x2', '\xF0', '\xE3', '\x3', 
		'\x2', '\x2', '\x2', '\xF0', '\xE4', '\x3', '\x2', '\x2', '\x2', '\xF0', 
		'\xE9', '\x3', '\x2', '\x2', '\x2', '\xF0', '\xEE', '\x3', '\x2', '\x2', 
		'\x2', '\xF0', '\xEF', '\x3', '\x2', '\x2', '\x2', '\xF1', '\x104', '\x3', 
		'\x2', '\x2', '\x2', '\xF2', '\xF3', '\f', '\f', '\x2', '\x2', '\xF3', 
		'\xF4', '\a', '\x1B', '\x2', '\x2', '\xF4', '\x103', '\x5', ',', '\x17', 
		'\r', '\xF5', '\xF6', '\f', '\v', '\x2', '\x2', '\xF6', '\xF7', '\a', 
		'\x19', '\x2', '\x2', '\xF7', '\x103', '\x5', ',', '\x17', '\f', '\xF8', 
		'\xF9', '\f', '\n', '\x2', '\x2', '\xF9', '\xFA', '\a', '\x1A', '\x2', 
		'\x2', '\xFA', '\x103', '\x5', ',', '\x17', '\v', '\xFB', '\xFC', '\f', 
		'\t', '\x2', '\x2', '\xFC', '\xFD', '\t', '\x3', '\x2', '\x2', '\xFD', 
		'\x103', '\x5', ',', '\x17', '\n', '\xFE', '\xFF', '\f', '\x10', '\x2', 
		'\x2', '\xFF', '\x103', '\a', '\x5', '\x2', '\x2', '\x100', '\x101', '\f', 
		'\xF', '\x2', '\x2', '\x101', '\x103', '\a', '\x6', '\x2', '\x2', '\x102', 
		'\xF2', '\x3', '\x2', '\x2', '\x2', '\x102', '\xF5', '\x3', '\x2', '\x2', 
		'\x2', '\x102', '\xF8', '\x3', '\x2', '\x2', '\x2', '\x102', '\xFB', '\x3', 
		'\x2', '\x2', '\x2', '\x102', '\xFE', '\x3', '\x2', '\x2', '\x2', '\x102', 
		'\x100', '\x3', '\x2', '\x2', '\x2', '\x103', '\x106', '\x3', '\x2', '\x2', 
		'\x2', '\x104', '\x102', '\x3', '\x2', '\x2', '\x2', '\x104', '\x105', 
		'\x3', '\x2', '\x2', '\x2', '\x105', '-', '\x3', '\x2', '\x2', '\x2', 
		'\x106', '\x104', '\x3', '\x2', '\x2', '\x2', '\x107', '\x10C', '\x5', 
		',', '\x17', '\x2', '\x108', '\x109', '\a', '\x18', '\x2', '\x2', '\x109', 
		'\x10B', '\x5', ',', '\x17', '\x2', '\x10A', '\x108', '\x3', '\x2', '\x2', 
		'\x2', '\x10B', '\x10E', '\x3', '\x2', '\x2', '\x2', '\x10C', '\x10A', 
		'\x3', '\x2', '\x2', '\x2', '\x10C', '\x10D', '\x3', '\x2', '\x2', '\x2', 
		'\x10D', '/', '\x3', '\x2', '\x2', '\x2', '\x10E', '\x10C', '\x3', '\x2', 
		'\x2', '\x2', '\x1C', '\x32', '\x34', '<', '\x44', 'H', 'P', 'T', 'Z', 
		'^', 'p', 'v', '\x80', '\x82', '\x88', '\x8F', '\x96', '\x9F', '\xB2', 
		'\xC2', '\xD4', '\xE6', '\xEB', '\xF0', '\x102', '\x104', '\x10C',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
