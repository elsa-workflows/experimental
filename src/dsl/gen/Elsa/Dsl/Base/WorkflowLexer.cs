//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Projects/Elsa/experimental/src/dsl\Workflow.g4 by ANTLR 4.9.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Elsa.Dsl.Base {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.1")]
[System.CLSCompliant(false)]
public partial class WorkflowLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, COLON=4, WORD=5, WHITESPACE=6, NEWLINE=7, INDENT=8;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "LOWERCASE", "UPPERCASE", "COLON", "WORD", "WHITESPACE", 
		"NEWLINE", "INDENT"
	};


	public WorkflowLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public WorkflowLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'Id:'", "'Description:'", "'Version:'", "':'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, "COLON", "WORD", "WHITESPACE", "NEWLINE", "INDENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Workflow.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static WorkflowLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\n', 'T', '\b', '\x1', '\x4', '\x2', '\t', '\x2', '\x4', 
		'\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', 
		'\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', 
		'\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', 
		'\v', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x6', 
		'\b', ';', '\n', '\b', '\r', '\b', '\xE', '\b', '<', '\x3', '\t', '\x6', 
		'\t', '@', '\n', '\t', '\r', '\t', '\xE', '\t', '\x41', '\x3', '\n', '\x6', 
		'\n', '\x45', '\n', '\n', '\r', '\n', '\xE', '\n', '\x46', '\x3', '\v', 
		'\x6', '\v', 'J', '\n', '\v', '\r', '\v', '\xE', '\v', 'K', '\x3', '\v', 
		'\x6', '\v', 'O', '\n', '\v', '\r', '\v', '\xE', '\v', 'P', '\x5', '\v', 
		'S', '\n', '\v', '\x2', '\x2', '\f', '\x3', '\x3', '\x5', '\x4', '\a', 
		'\x5', '\t', '\x2', '\v', '\x2', '\r', '\x6', '\xF', '\a', '\x11', '\b', 
		'\x13', '\t', '\x15', '\n', '\x3', '\x2', '\x6', '\x3', '\x2', '\x63', 
		'|', '\x3', '\x2', '\x43', '\\', '\x4', '\x2', '\v', '\v', '\"', '\"', 
		'\x4', '\x2', '\f', '\f', '\xF', '\xF', '\x2', 'Y', '\x2', '\x3', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\x5', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\a', '\x3', '\x2', '\x2', '\x2', '\x2', '\r', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\xF', '\x3', '\x2', '\x2', '\x2', '\x2', '\x11', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\x13', '\x3', '\x2', '\x2', '\x2', '\x2', '\x15', 
		'\x3', '\x2', '\x2', '\x2', '\x3', '\x17', '\x3', '\x2', '\x2', '\x2', 
		'\x5', '\x1B', '\x3', '\x2', '\x2', '\x2', '\a', '(', '\x3', '\x2', '\x2', 
		'\x2', '\t', '\x31', '\x3', '\x2', '\x2', '\x2', '\v', '\x33', '\x3', 
		'\x2', '\x2', '\x2', '\r', '\x35', '\x3', '\x2', '\x2', '\x2', '\xF', 
		':', '\x3', '\x2', '\x2', '\x2', '\x11', '?', '\x3', '\x2', '\x2', '\x2', 
		'\x13', '\x44', '\x3', '\x2', '\x2', '\x2', '\x15', 'R', '\x3', '\x2', 
		'\x2', '\x2', '\x17', '\x18', '\a', 'K', '\x2', '\x2', '\x18', '\x19', 
		'\a', '\x66', '\x2', '\x2', '\x19', '\x1A', '\a', '<', '\x2', '\x2', '\x1A', 
		'\x4', '\x3', '\x2', '\x2', '\x2', '\x1B', '\x1C', '\a', '\x46', '\x2', 
		'\x2', '\x1C', '\x1D', '\a', 'g', '\x2', '\x2', '\x1D', '\x1E', '\a', 
		'u', '\x2', '\x2', '\x1E', '\x1F', '\a', '\x65', '\x2', '\x2', '\x1F', 
		' ', '\a', 't', '\x2', '\x2', ' ', '!', '\a', 'k', '\x2', '\x2', '!', 
		'\"', '\a', 'r', '\x2', '\x2', '\"', '#', '\a', 'v', '\x2', '\x2', '#', 
		'$', '\a', 'k', '\x2', '\x2', '$', '%', '\a', 'q', '\x2', '\x2', '%', 
		'&', '\a', 'p', '\x2', '\x2', '&', '\'', '\a', '<', '\x2', '\x2', '\'', 
		'\x6', '\x3', '\x2', '\x2', '\x2', '(', ')', '\a', 'X', '\x2', '\x2', 
		')', '*', '\a', 'g', '\x2', '\x2', '*', '+', '\a', 't', '\x2', '\x2', 
		'+', ',', '\a', 'u', '\x2', '\x2', ',', '-', '\a', 'k', '\x2', '\x2', 
		'-', '.', '\a', 'q', '\x2', '\x2', '.', '/', '\a', 'p', '\x2', '\x2', 
		'/', '\x30', '\a', '<', '\x2', '\x2', '\x30', '\b', '\x3', '\x2', '\x2', 
		'\x2', '\x31', '\x32', '\t', '\x2', '\x2', '\x2', '\x32', '\n', '\x3', 
		'\x2', '\x2', '\x2', '\x33', '\x34', '\t', '\x3', '\x2', '\x2', '\x34', 
		'\f', '\x3', '\x2', '\x2', '\x2', '\x35', '\x36', '\a', '<', '\x2', '\x2', 
		'\x36', '\xE', '\x3', '\x2', '\x2', '\x2', '\x37', ';', '\x5', '\t', '\x5', 
		'\x2', '\x38', ';', '\x5', '\v', '\x6', '\x2', '\x39', ';', '\a', '\x61', 
		'\x2', '\x2', ':', '\x37', '\x3', '\x2', '\x2', '\x2', ':', '\x38', '\x3', 
		'\x2', '\x2', '\x2', ':', '\x39', '\x3', '\x2', '\x2', '\x2', ';', '<', 
		'\x3', '\x2', '\x2', '\x2', '<', ':', '\x3', '\x2', '\x2', '\x2', '<', 
		'=', '\x3', '\x2', '\x2', '\x2', '=', '\x10', '\x3', '\x2', '\x2', '\x2', 
		'>', '@', '\t', '\x4', '\x2', '\x2', '?', '>', '\x3', '\x2', '\x2', '\x2', 
		'@', '\x41', '\x3', '\x2', '\x2', '\x2', '\x41', '?', '\x3', '\x2', '\x2', 
		'\x2', '\x41', '\x42', '\x3', '\x2', '\x2', '\x2', '\x42', '\x12', '\x3', 
		'\x2', '\x2', '\x2', '\x43', '\x45', '\t', '\x5', '\x2', '\x2', '\x44', 
		'\x43', '\x3', '\x2', '\x2', '\x2', '\x45', '\x46', '\x3', '\x2', '\x2', 
		'\x2', '\x46', '\x44', '\x3', '\x2', '\x2', '\x2', '\x46', 'G', '\x3', 
		'\x2', '\x2', '\x2', 'G', '\x14', '\x3', '\x2', '\x2', '\x2', 'H', 'J', 
		'\a', '\"', '\x2', '\x2', 'I', 'H', '\x3', '\x2', '\x2', '\x2', 'J', 'K', 
		'\x3', '\x2', '\x2', '\x2', 'K', 'I', '\x3', '\x2', '\x2', '\x2', 'K', 
		'L', '\x3', '\x2', '\x2', '\x2', 'L', 'S', '\x3', '\x2', '\x2', '\x2', 
		'M', 'O', '\a', '\v', '\x2', '\x2', 'N', 'M', '\x3', '\x2', '\x2', '\x2', 
		'O', 'P', '\x3', '\x2', '\x2', '\x2', 'P', 'N', '\x3', '\x2', '\x2', '\x2', 
		'P', 'Q', '\x3', '\x2', '\x2', '\x2', 'Q', 'S', '\x3', '\x2', '\x2', '\x2', 
		'R', 'I', '\x3', '\x2', '\x2', '\x2', 'R', 'N', '\x3', '\x2', '\x2', '\x2', 
		'S', '\x16', '\x3', '\x2', '\x2', '\x2', '\n', '\x2', ':', '<', '\x41', 
		'\x46', 'K', 'P', 'R', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Elsa.Dsl.Base
