//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Projects/Elsa/experimental/src/dsl\Workflow.g4 by ANTLR 4.9.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Elsa.Dsl.Base {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.1")]
[System.CLSCompliant(false)]
public partial class WorkflowParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, COLON=4, WORD=5, WHITESPACE=6, NEWLINE=7, INDENT=8;
	public const int
		RULE_metadata = 0, RULE_id = 1, RULE_description = 2, RULE_version = 3;
	public static readonly string[] ruleNames = {
		"metadata", "id", "description", "version"
	};

	private static readonly string[] _LiteralNames = {
		null, "'Id:'", "'Description:'", "'Version:'", "':'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, "COLON", "WORD", "WHITESPACE", "NEWLINE", "INDENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Workflow.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static WorkflowParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public WorkflowParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public WorkflowParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class MetadataContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DescriptionContext description() {
			return GetRuleContext<DescriptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VersionContext version() {
			return GetRuleContext<VersionContext>(0);
		}
		public MetadataContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_metadata; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWorkflowVisitor<TResult> typedVisitor = visitor as IWorkflowVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMetadata(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MetadataContext metadata() {
		MetadataContext _localctx = new MetadataContext(Context, State);
		EnterRule(_localctx, 0, RULE_metadata);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8;
			id();
			State = 9;
			description();
			State = 10;
			version();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORD() { return GetToken(WorkflowParser.WORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHITESPACE() { return GetToken(WorkflowParser.WHITESPACE, 0); }
		public IdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWorkflowVisitor<TResult> typedVisitor = visitor as IWorkflowVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdContext id() {
		IdContext _localctx = new IdContext(Context, State);
		EnterRule(_localctx, 2, RULE_id);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12;
			Match(T__0);
			State = 14;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHITESPACE) {
				{
				State = 13;
				Match(WHITESPACE);
				}
			}

			State = 16;
			Match(WORD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DescriptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORD() { return GetToken(WorkflowParser.WORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHITESPACE() { return GetToken(WorkflowParser.WHITESPACE, 0); }
		public DescriptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_description; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWorkflowVisitor<TResult> typedVisitor = visitor as IWorkflowVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDescription(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DescriptionContext description() {
		DescriptionContext _localctx = new DescriptionContext(Context, State);
		EnterRule(_localctx, 4, RULE_description);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 18;
			Match(T__1);
			State = 20;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHITESPACE) {
				{
				State = 19;
				Match(WHITESPACE);
				}
			}

			State = 22;
			Match(WORD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VersionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORD() { return GetToken(WorkflowParser.WORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHITESPACE() { return GetToken(WorkflowParser.WHITESPACE, 0); }
		public VersionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_version; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWorkflowVisitor<TResult> typedVisitor = visitor as IWorkflowVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVersion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VersionContext version() {
		VersionContext _localctx = new VersionContext(Context, State);
		EnterRule(_localctx, 6, RULE_version);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 24;
			Match(T__2);
			State = 26;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHITESPACE) {
				{
				State = 25;
				Match(WHITESPACE);
				}
			}

			State = 28;
			Match(WORD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\n', '!', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', '\t', 
		'\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', 
		'\x5', '\x3', '\x11', '\n', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x4', '\x3', '\x4', '\x5', '\x4', '\x17', '\n', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\x1D', '\n', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x2', '\x2', '\x6', 
		'\x2', '\x4', '\x6', '\b', '\x2', '\x2', '\x2', '\x1F', '\x2', '\n', '\x3', 
		'\x2', '\x2', '\x2', '\x4', '\xE', '\x3', '\x2', '\x2', '\x2', '\x6', 
		'\x14', '\x3', '\x2', '\x2', '\x2', '\b', '\x1A', '\x3', '\x2', '\x2', 
		'\x2', '\n', '\v', '\x5', '\x4', '\x3', '\x2', '\v', '\f', '\x5', '\x6', 
		'\x4', '\x2', '\f', '\r', '\x5', '\b', '\x5', '\x2', '\r', '\x3', '\x3', 
		'\x2', '\x2', '\x2', '\xE', '\x10', '\a', '\x3', '\x2', '\x2', '\xF', 
		'\x11', '\a', '\b', '\x2', '\x2', '\x10', '\xF', '\x3', '\x2', '\x2', 
		'\x2', '\x10', '\x11', '\x3', '\x2', '\x2', '\x2', '\x11', '\x12', '\x3', 
		'\x2', '\x2', '\x2', '\x12', '\x13', '\a', '\a', '\x2', '\x2', '\x13', 
		'\x5', '\x3', '\x2', '\x2', '\x2', '\x14', '\x16', '\a', '\x4', '\x2', 
		'\x2', '\x15', '\x17', '\a', '\b', '\x2', '\x2', '\x16', '\x15', '\x3', 
		'\x2', '\x2', '\x2', '\x16', '\x17', '\x3', '\x2', '\x2', '\x2', '\x17', 
		'\x18', '\x3', '\x2', '\x2', '\x2', '\x18', '\x19', '\a', '\a', '\x2', 
		'\x2', '\x19', '\a', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x1C', '\a', 
		'\x5', '\x2', '\x2', '\x1B', '\x1D', '\a', '\b', '\x2', '\x2', '\x1C', 
		'\x1B', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x1D', '\x3', '\x2', '\x2', 
		'\x2', '\x1D', '\x1E', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x1F', '\a', 
		'\a', '\x2', '\x2', '\x1F', '\t', '\x3', '\x2', '\x2', '\x2', '\x5', '\x10', 
		'\x16', '\x1C',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Elsa.Dsl.Base
